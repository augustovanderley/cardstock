//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, BOOLOP=64, COMPOP=65, EQOP=66, 
		UNOP=67, INTNUM=68, LETT=69, OPEN=70, CLOSE=71, WS=72, ANY=73;
	public const int
		RULE_var = 0, RULE_game = 1, RULE_setup = 2, RULE_stage = 3, RULE_scoring = 4, 
		RULE_endcondition = 5, RULE_action = 6, RULE_multiaction = 7, RULE_multiaction2 = 8, 
		RULE_condact = 9, RULE_agg = 10, RULE_let = 11, RULE_declare = 12, RULE_playercreate = 13, 
		RULE_teamcreate = 14, RULE_deckcreate = 15, RULE_dicecreate = 16, RULE_deck = 17, 
		RULE_teams = 18, RULE_attribute = 19, RULE_initpoints = 20, RULE_awards = 21, 
		RULE_subaward = 22, RULE_cycleaction = 23, RULE_setaction = 24, RULE_incaction = 25, 
		RULE_decaction = 26, RULE_moveaction = 27, RULE_copyaction = 28, RULE_removeaction = 29, 
		RULE_shuffleaction = 30, RULE_turnaction = 31, RULE_repeat = 32, RULE_card = 33, 
		RULE_actual = 34, RULE_rawstorage = 35, RULE_cstorage = 36, RULE_memstorage = 37, 
		RULE_memset = 38, RULE_tuple = 39, RULE_locpre = 40, RULE_locdesc = 41, 
		RULE_who = 42, RULE_whop = 43, RULE_whot = 44, RULE_whodesc = 45, RULE_owner = 46, 
		RULE_teamp = 47, RULE_other = 48, RULE_typed = 49, RULE_collection = 50, 
		RULE_strcollection = 51, RULE_cstoragecollection = 52, RULE_range = 53, 
		RULE_filter = 54, RULE_attrcomp = 55, RULE_cardatt = 56, RULE_boolean = 57, 
		RULE_intop = 58, RULE_add = 59, RULE_mult = 60, RULE_subtract = 61, RULE_mod = 62, 
		RULE_divide = 63, RULE_sizeof = 64, RULE_maxof = 65, RULE_minof = 66, 
		RULE_unionof = 67, RULE_sum = 68, RULE_score = 69, RULE_int = 70, RULE_namegr = 71;
	public static readonly string[] ruleNames = {
		"var", "game", "setup", "stage", "scoring", "endcondition", "action", 
		"multiaction", "multiaction2", "condact", "agg", "let", "declare", "playercreate", 
		"teamcreate", "deckcreate", "dicecreate", "deck", "teams", "attribute", 
		"initpoints", "awards", "subaward", "cycleaction", "setaction", "incaction", 
		"decaction", "moveaction", "copyaction", "removeaction", "shuffleaction", 
		"turnaction", "repeat", "card", "actual", "rawstorage", "cstorage", "memstorage", 
		"memset", "tuple", "locpre", "locdesc", "who", "whop", "whot", "whodesc", 
		"owner", "teamp", "other", "typed", "collection", "strcollection", "cstoragecollection", 
		"range", "filter", "attrcomp", "cardatt", "boolean", "intop", "add", "mult", 
		"subtract", "mod", "divide", "sizeof", "maxof", "minof", "unionof", "sum", 
		"score", "int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "'dice'", "','", 
		"'put'", "'points'", "'cycle'", "'next'", "'current'", "'previous'", "'set'", 
		"'inc'", "'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", 
		"'pass'", "'repeat'", "'top'", "'bottom'", "'actual'", "'sto'", "'tuples'", 
		"'using'", "'vloc'", "'iloc'", "'hloc'", "'mem'", "'owner'", "'other'", 
		"'range'", "'..'", "'filter'", "'cardatt'", "'+'", "'*'", "'-'", "'%'", 
		"'//'", "'size'", "'union'", "'sum'", "'score'", null, null, null, "'not'", 
		null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", 
		"LETT", "OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(T__0);
			State = 145; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 2, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(OPEN);
			State = 148; Match(T__1);
			State = 152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 149; declare();
					}
					} 
				}
				State = 154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 155; setup();
			State = 158;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 158;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 156; multiaction();
						}
						break;
					case 2:
						{
						State = 157; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 160;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 162; scoring();
			State = 163; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public DicecreateContext[] dicecreate() {
			return GetRuleContexts<DicecreateContext>();
		}
		public DicecreateContext dicecreate(int i) {
			return GetRuleContext<DicecreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; Match(OPEN);
			State = 166; Match(T__2);
			State = 167; playercreate();
			State = 168; Match(OPEN);
			State = 169; teamcreate();
			State = 170; Match(CLOSE);
			State = 179;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 171; Match(OPEN);
					State = 175;
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 172; deckcreate();
						}
						break;
					case 2:
						{
						State = 173; repeat();
						}
						break;
					case 3:
						{
						State = 174; dicecreate();
						}
						break;
					}
					State = 177; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 181;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 183; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 6, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(OPEN);
			State = 186; Match(T__3);
			State = 187;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 188; endcondition();
			State = 191;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 191;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 189; multiaction();
						}
						break;
					case 2:
						{
						State = 190; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 195; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 8, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(OPEN);
			State = 198; Match(T__6);
			State = 199;
			_la = TokenStream.La(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 200; @int();
			State = 201; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(OPEN);
			State = 204; Match(T__9);
			State = 205; boolean();
			State = 206; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_action);
		try {
			State = 227;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; Match(OPEN);
				State = 222;
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 209; initpoints();
					}
					break;
				case 2:
					{
					State = 210; teamcreate();
					}
					break;
				case 3:
					{
					State = 211; deckcreate();
					}
					break;
				case 4:
					{
					State = 212; cycleaction();
					}
					break;
				case 5:
					{
					State = 213; setaction();
					}
					break;
				case 6:
					{
					State = 214; moveaction();
					}
					break;
				case 7:
					{
					State = 215; copyaction();
					}
					break;
				case 8:
					{
					State = 216; incaction();
					}
					break;
				case 9:
					{
					State = 217; decaction();
					}
					break;
				case 10:
					{
					State = 218; removeaction();
					}
					break;
				case 11:
					{
					State = 219; turnaction();
					}
					break;
				case 12:
					{
					State = 220; shuffleaction();
					}
					break;
				case 13:
					{
					State = 221; repeat();
					}
					break;
				}
				State = 224; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction);
		try {
			int _alt;
			State = 253;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(OPEN);
				State = 230; Match(T__10);
				State = 231; Match(OPEN);
				State = 233;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 232; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 235;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 237; Match(CLOSE);
				State = 238; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240; Match(OPEN);
				State = 241; Match(T__11);
				State = 242; Match(OPEN);
				State = 244;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 243; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 246;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 248; Match(CLOSE);
				State = 249; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 252; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 16, RULE_multiaction2);
		try {
			int _alt;
			State = 268;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255; Match(OPEN);
				State = 256; Match(T__11);
				State = 257; Match(OPEN);
				State = 259;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 258; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 261;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 263; Match(CLOSE);
				State = 264; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 266; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 267; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 18, RULE_condact);
		try {
			State = 282;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; Match(OPEN);
				State = 271; boolean();
				State = 272; multiaction2();
				State = 273; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276; Match(OPEN);
				State = 277; boolean();
				State = 278; action();
				State = 279; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 20, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(OPEN);
			State = 285;
			_la = TokenStream.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 286; collection();
			State = 287; var();
			State = 292;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 288; condact();
				}
				break;
			case 2:
				{
				State = 289; boolean();
				}
				break;
			case 3:
				{
				State = 290; cstorage();
				}
				break;
			case 4:
				{
				State = 291; rawstorage();
				}
				break;
			}
			State = 294; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 22, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(OPEN);
			State = 297; Match(T__14);
			State = 298; typed();
			State = 299; var();
			State = 303;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 300; multiaction();
				}
				break;
			case 2:
				{
				State = 301; action();
				}
				break;
			case 3:
				{
				State = 302; condact();
				}
				break;
			}
			State = 305; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 24, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(OPEN);
			State = 308; Match(T__15);
			State = 309; typed();
			State = 310; var();
			State = 311; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313; Match(OPEN);
			State = 314; Match(T__16);
			State = 315; Match(T__17);
			State = 318;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 316; var();
				}
				break;
			case 2:
				{
				State = 317; @int();
				}
				break;
			}
			State = 320; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(T__16);
			State = 323; Match(T__18);
			State = 325;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 324; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 30, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; Match(T__16);
			State = 330; Match(T__19);
			State = 331; cstorage();
			State = 332; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DicecreateContext : ParserRuleContext {
		public ITerminalNode INTNUM() { return GetToken(RecycleParser.INTNUM, 0); }
		public DicecreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dicecreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDicecreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDicecreate(this);
		}
	}

	[RuleVersion(0)]
	public DicecreateContext dicecreate() {
		DicecreateContext _localctx = new DicecreateContext(Context, State);
		EnterRule(_localctx, 32, RULE_dicecreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(T__16);
			State = 335; Match(T__20);
			State = 336; Match(INTNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 34, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(OPEN);
			State = 339; Match(T__19);
			State = 341;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 340; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 345; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 36, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 347; Match(OPEN);
			State = 352;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 348; Match(INTNUM);
					State = 349; Match(T__21);
					}
					} 
				}
				State = 354;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			State = 355; Match(INTNUM);
			State = 359;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 356; teams();
					}
					} 
				}
				State = 361;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 362; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute);
		try {
			int _alt;
			State = 386;
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; Match(OPEN);
				State = 365; var();
				State = 366; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 368; Match(OPEN);
				State = 374;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 369; namegr();
						State = 370; Match(T__21);
						}
						} 
					}
					State = 376;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				State = 377; namegr();
				State = 381;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 378; attribute();
						}
						} 
					}
					State = 383;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 384; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 40, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388; Match(T__22);
			State = 389; Match(T__23);
			State = 390; var();
			State = 391; Match(OPEN);
			State = 393;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 392; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 395;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 397; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 42, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(OPEN);
			State = 401;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 400; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 405; @int();
			State = 406; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 44, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(OPEN);
			State = 409; namegr();
			State = 415;
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				State = 410; Match(OPEN);
				State = 411; namegr();
				State = 412; Match(CLOSE);
				}
				break;
			case 2:
				{
				State = 414; cardatt();
				}
				break;
			}
			State = 417; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 46, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; Match(T__24);
			State = 420;
			_la = TokenStream.La(1);
			if ( !(_la==T__25 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 425;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 421; owner();
				}
				break;
			case T__26:
				{
				State = 422; Match(T__26);
				}
				break;
			case T__25:
				{
				State = 423; Match(T__25);
				}
				break;
			case T__27:
				{
				State = 424; Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(T__28);
			State = 428; rawstorage();
			State = 429; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(T__29);
			State = 432; rawstorage();
			State = 433; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(T__30);
			State = 436; rawstorage();
			State = 437; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(T__31);
			State = 440; card();
			State = 441; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; Match(T__32);
			State = 444; card();
			State = 445; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(T__33);
			State = 448; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(T__34);
			State = 451; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 62, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(T__35);
			State = 454; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 64, RULE_repeat);
		try {
			State = 466;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 456; Match(T__37);
				State = 457; @int();
				State = 458; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 460; Match(T__37);
				State = 461; Match(T__13);
				State = 462; Match(OPEN);
				State = 463; moveaction();
				State = 464; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 66, RULE_card);
		try {
			State = 481;
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 469; maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 470; minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 471; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 472; Match(OPEN);
				State = 476;
				switch (TokenStream.La(1)) {
				case T__38:
					{
					State = 473; Match(T__38);
					}
					break;
				case T__39:
					{
					State = 474; Match(T__39);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 475; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 478; cstorage();
				State = 479; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 68, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(OPEN);
			State = 484; Match(T__40);
			State = 485; card();
			State = 486; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 70, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; Match(OPEN);
			State = 492;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 489; var();
				}
				break;
			case T__1:
				{
				State = 490; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 491; who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 494; Match(T__41);
			State = 497;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 495; namegr();
				}
				break;
			case T__0:
				{
				State = 496; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 499; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 72, RULE_cstorage);
		try {
			State = 514;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 501; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 502; unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 503; filter();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 504; Match(OPEN);
				State = 505; locpre();
				State = 506; locdesc();
				State = 509;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 507; namegr();
					}
					break;
				case T__0:
					{
					State = 508; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 511; Match(CLOSE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 513; memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 74, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(OPEN);
			State = 520;
			switch (TokenStream.La(1)) {
			case T__38:
				{
				State = 517; Match(T__38);
				}
				break;
			case T__39:
				{
				State = 518; Match(T__39);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 519; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 522; memset();
			State = 523; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 76, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 78, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; Match(OPEN);
			State = 528; Match(T__42);
			State = 529; @int();
			State = 530; cstorage();
			State = 531; Match(T__43);
			State = 532; var();
			State = 533; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 80, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 535; var();
				}
				break;
			case T__1:
				{
				State = 536; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 537; whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 82, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 540;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 84, RULE_who);
		try {
			State = 544;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 542; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 543; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 86, RULE_whop);
		try {
			State = 552;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 546; Match(OPEN);
				State = 547; whodesc();
				State = 548; Match(T__4);
				State = 549; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 551; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 88, RULE_whot);
		try {
			State = 560;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 554; Match(OPEN);
				State = 555; whodesc();
				State = 556; Match(T__5);
				State = 557; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 559; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 90, RULE_whodesc);
		try {
			State = 566;
			switch (TokenStream.La(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 562; @int();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 563; Match(T__27);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 3);
				{
				State = 564; Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 4);
				{
				State = 565; Match(T__26);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 92, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 568; Match(OPEN);
			State = 569; Match(T__48);
			State = 570; card();
			State = 571; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 94, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(OPEN);
			State = 574; Match(T__5);
			State = 575; whop();
			State = 576; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 96, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 578; Match(OPEN);
			State = 579; Match(T__49);
			State = 580;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 581; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 98, RULE_typed);
		try {
			State = 588;
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584; @int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 585; boolean();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 586; namegr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 587; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 100, RULE_collection);
		try {
			State = 600;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 590; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 591; cstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 592; strcollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 593; cstoragecollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 594; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 595; Match(T__5);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 596; whot();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 597; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 598; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 599; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 102, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 602; Match(OPEN);
			State = 608;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 603; namegr();
					State = 604; Match(T__21);
					}
					} 
				}
				State = 610;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			State = 611; namegr();
			State = 612; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 104, RULE_cstoragecollection);
		try {
			State = 617;
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 106, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619; Match(OPEN);
			State = 620; Match(T__50);
			State = 621; @int();
			State = 622; Match(T__51);
			State = 623; @int();
			State = 624; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 108, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; Match(OPEN);
			State = 627; Match(T__52);
			State = 628; collection();
			State = 629; var();
			State = 630; boolean();
			State = 631; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 110, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(EQOP);
			State = 634; cardatt();
			State = 635; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 112, RULE_cardatt);
		try {
			State = 648;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637; var();
				}
				break;
			case LETT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 638; namegr();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 639; Match(OPEN);
				State = 640; Match(T__53);
				State = 643;
				switch (TokenStream.La(1)) {
				case T__0:
					{
					State = 641; var();
					}
					break;
				case LETT:
					{
					State = 642; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 645; card();
				State = 646; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 114, RULE_boolean);
		try {
			int _alt;
			State = 682;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 650; Match(OPEN);
				State = 677;
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 651; Match(BOOLOP);
					State = 652; boolean();
					State = 654;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 653; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 656;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				case 2:
					{
					State = 658; intop();
					State = 659; @int();
					State = 660; @int();
					}
					break;
				case 3:
					{
					State = 662; attrcomp();
					}
					break;
				case 4:
					{
					State = 663; Match(EQOP);
					State = 664; card();
					State = 665; card();
					}
					break;
				case 5:
					{
					State = 667; Match(UNOP);
					State = 668; boolean();
					}
					break;
				case 6:
					{
					State = 669; Match(EQOP);
					State = 670; whop();
					State = 671; whop();
					}
					break;
				case 7:
					{
					State = 673; Match(EQOP);
					State = 674; whot();
					State = 675; whot();
					}
					break;
				}
				State = 679; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 681; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 116, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 684;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 118, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 686; Match(OPEN);
			State = 687; Match(T__54);
			State = 688; @int();
			State = 689; @int();
			State = 690; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 120, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 692; Match(OPEN);
			State = 693; Match(T__55);
			State = 694; @int();
			State = 695; @int();
			State = 696; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 122, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(OPEN);
			State = 699; Match(T__56);
			State = 700; @int();
			State = 701; @int();
			State = 702; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 124, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704; Match(OPEN);
			State = 705; Match(T__57);
			State = 706; @int();
			State = 707; @int();
			State = 708; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 126, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 710; Match(OPEN);
			State = 711; Match(T__58);
			State = 712; @int();
			State = 713; @int();
			State = 714; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 128, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 716; Match(OPEN);
			State = 717; Match(T__59);
			State = 721;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 718; var();
				}
				break;
			case 2:
				{
				State = 719; cstorage();
				}
				break;
			case 3:
				{
				State = 720; memset();
				}
				break;
			}
			State = 723; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 130, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 725; Match(OPEN);
			State = 726; Match(T__8);
			State = 727; cstorage();
			State = 728; Match(T__43);
			State = 729; var();
			State = 730; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 132, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 732; Match(OPEN);
			State = 733; Match(T__7);
			State = 734; cstorage();
			State = 735; Match(T__43);
			State = 736; var();
			State = 737; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 134, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(OPEN);
			State = 740; Match(T__60);
			State = 747;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 741; agg();
				}
				break;
			case 2:
				{
				State = 743;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 742; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 745;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 749; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 136, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 751; Match(OPEN);
			State = 752; Match(T__61);
			State = 753; cstorage();
			State = 754; Match(T__43);
			State = 755; var();
			State = 756; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 138, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 758; Match(OPEN);
			State = 759; Match(T__62);
			State = 760; card();
			State = 761; Match(T__43);
			State = 762; var();
			State = 763; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 140, RULE_int);
		try {
			int _alt;
			State = 780;
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 765; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 766; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 767; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 768; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 769; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 770; add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 771; divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 772; sum();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 773; rawstorage();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 774; score();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 776;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 775; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 778;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 142, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 783;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 782; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 785;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3K\x316\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\a\x3\x99\n\x3\f\x3\xE\x3\x9C\v\x3\x3\x3\x3\x3\x3\x3\x6\x3\xA1\n\x3\r"+
		"\x3\xE\x3\xA2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x5\x4\xB2\n\x4\x3\x4\x3\x4\x6\x4\xB6\n\x4\r\x4\xE"+
		"\x4\xB7\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x6\x5\xC2\n\x5"+
		"\r\x5\xE\x5\xC3\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x5\b\xE1\n\b\x3\b\x3\b\x3\b\x5\b\xE6\n\b\x3\t\x3\t\x3"+
		"\t\x3\t\x6\t\xEC\n\t\r\t\xE\t\xED\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x6"+
		"\t\xF7\n\t\r\t\xE\t\xF8\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x100\n\t\x3\n\x3"+
		"\n\x3\n\x3\n\x6\n\x106\n\n\r\n\xE\n\x107\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\x10F\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x5\v\x11D\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x127\n\f\x3"+
		"\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r\x132\n\r\x3\r\x3\r\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF"+
		"\x141\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x6\x10\x148\n\x10\r\x10\xE"+
		"\x10\x149\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x6\x13\x158\n\x13\r\x13\xE\x13\x159\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\a\x14\x161\n\x14\f\x14\xE\x14\x164\v\x14\x3\x14"+
		"\x3\x14\a\x14\x168\n\x14\f\x14\xE\x14\x16B\v\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x177\n\x15\f\x15"+
		"\xE\x15\x17A\v\x15\x3\x15\x3\x15\a\x15\x17E\n\x15\f\x15\xE\x15\x181\v"+
		"\x15\x3\x15\x3\x15\x5\x15\x185\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16"+
		"\x6\x16\x18C\n\x16\r\x16\xE\x16\x18D\x3\x16\x3\x16\x3\x17\x3\x17\x6\x17"+
		"\x194\n\x17\r\x17\xE\x17\x195\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x1A2\n\x18\x3\x18\x3\x18\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x1AC\n\x19\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x5\"\x1D5\n\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x1DF\n#\x3#\x3"+
		"#\x3#\x5#\x1E4\n#\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x5%\x1EF\n%\x3%"+
		"\x3%\x3%\x5%\x1F4\n%\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x200"+
		"\n&\x3&\x3&\x3&\x5&\x205\n&\x3\'\x3\'\x3\'\x3\'\x5\'\x20B\n\'\x3\'\x3"+
		"\'\x3\'\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x5*\x21D\n"+
		"*\x3+\x3+\x3,\x3,\x5,\x223\n,\x3-\x3-\x3-\x3-\x3-\x3-\x5-\x22B\n-\x3."+
		"\x3.\x3.\x3.\x3.\x3.\x5.\x233\n.\x3/\x3/\x3/\x3/\x5/\x239\n/\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3"+
		"\x32\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x24F"+
		"\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x5\x34\x25B\n\x34\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x261\n\x35"+
		"\f\x35\xE\x35\x264\v\x35\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x5"+
		"\x36\x26C\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x3\x38"+
		"\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x39\x3\x39\x3\x39\x3\x39"+
		"\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x286\n:\x3:\x3:\x3:\x5:\x28B\n:\x3;\x3;\x3"+
		";\x3;\x6;\x291\n;\r;\xE;\x292\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;"+
		"\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x2A8\n;\x3;\x3;\x3;\x5;\x2AD"+
		"\n;\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3"+
		"?\x3?\x3?\x3?\x3@\x3@\x3@\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41"+
		"\x3\x41\x3\x42\x3\x42\x3\x42\x3\x42\x3\x42\x5\x42\x2D4\n\x42\x3\x42\x3"+
		"\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45\x6\x45\x2EA"+
		"\n\x45\r\x45\xE\x45\x2EB\x5\x45\x2EE\n\x45\x3\x45\x3\x45\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3H\x3"+
		"H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x6H\x30B\nH\rH\xEH\x30C\x5H\x30F"+
		"\nH\x3I\x6I\x312\nI\rI\xEI\x313\x3I\x14\x9A\xA2\xB7\xC3\xED\xF8\x107\x149"+
		"\x159\x162\x169\x178\x17F\x18D\x195\x262\x292\x2EB\x2J\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A"+
		"\x8C\x8E\x90\x2\b\x3\x2\a\b\x3\x2\n\v\x3\x2\xF\x10\x3\x2\x1C\x1D\x3\x2"+
		"/\x32\x3\x2\x43\x44\x344\x2\x92\x3\x2\x2\x2\x4\x95\x3\x2\x2\x2\x6\xA7"+
		"\x3\x2\x2\x2\b\xBB\x3\x2\x2\x2\n\xC7\x3\x2\x2\x2\f\xCD\x3\x2\x2\x2\xE"+
		"\xE5\x3\x2\x2\x2\x10\xFF\x3\x2\x2\x2\x12\x10E\x3\x2\x2\x2\x14\x11C\x3"+
		"\x2\x2\x2\x16\x11E\x3\x2\x2\x2\x18\x12A\x3\x2\x2\x2\x1A\x135\x3\x2\x2"+
		"\x2\x1C\x13B\x3\x2\x2\x2\x1E\x144\x3\x2\x2\x2 \x14B\x3\x2\x2\x2\"\x150"+
		"\x3\x2\x2\x2$\x154\x3\x2\x2\x2&\x15D\x3\x2\x2\x2(\x184\x3\x2\x2\x2*\x186"+
		"\x3\x2\x2\x2,\x191\x3\x2\x2\x2.\x19A\x3\x2\x2\x2\x30\x1A5\x3\x2\x2\x2"+
		"\x32\x1AD\x3\x2\x2\x2\x34\x1B1\x3\x2\x2\x2\x36\x1B5\x3\x2\x2\x2\x38\x1B9"+
		"\x3\x2\x2\x2:\x1BD\x3\x2\x2\x2<\x1C1\x3\x2\x2\x2>\x1C4\x3\x2\x2\x2@\x1C7"+
		"\x3\x2\x2\x2\x42\x1D4\x3\x2\x2\x2\x44\x1E3\x3\x2\x2\x2\x46\x1E5\x3\x2"+
		"\x2\x2H\x1EA\x3\x2\x2\x2J\x204\x3\x2\x2\x2L\x206\x3\x2\x2\x2N\x20F\x3"+
		"\x2\x2\x2P\x211\x3\x2\x2\x2R\x21C\x3\x2\x2\x2T\x21E\x3\x2\x2\x2V\x222"+
		"\x3\x2\x2\x2X\x22A\x3\x2\x2\x2Z\x232\x3\x2\x2\x2\\\x238\x3\x2\x2\x2^\x23A"+
		"\x3\x2\x2\x2`\x23F\x3\x2\x2\x2\x62\x244\x3\x2\x2\x2\x64\x24E\x3\x2\x2"+
		"\x2\x66\x25A\x3\x2\x2\x2h\x25C\x3\x2\x2\x2j\x26B\x3\x2\x2\x2l\x26D\x3"+
		"\x2\x2\x2n\x274\x3\x2\x2\x2p\x27B\x3\x2\x2\x2r\x28A\x3\x2\x2\x2t\x2AC"+
		"\x3\x2\x2\x2v\x2AE\x3\x2\x2\x2x\x2B0\x3\x2\x2\x2z\x2B6\x3\x2\x2\x2|\x2BC"+
		"\x3\x2\x2\x2~\x2C2\x3\x2\x2\x2\x80\x2C8\x3\x2\x2\x2\x82\x2CE\x3\x2\x2"+
		"\x2\x84\x2D7\x3\x2\x2\x2\x86\x2DE\x3\x2\x2\x2\x88\x2E5\x3\x2\x2\x2\x8A"+
		"\x2F1\x3\x2\x2\x2\x8C\x2F8\x3\x2\x2\x2\x8E\x30E\x3\x2\x2\x2\x90\x311\x3"+
		"\x2\x2\x2\x92\x93\a\x3\x2\x2\x93\x94\x5\x90I\x2\x94\x3\x3\x2\x2\x2\x95"+
		"\x96\aH\x2\x2\x96\x9A\a\x4\x2\x2\x97\x99\x5\x1A\xE\x2\x98\x97\x3\x2\x2"+
		"\x2\x99\x9C\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9D"+
		"\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9D\xA0\x5\x6\x4\x2\x9E\xA1\x5\x10\t"+
		"\x2\x9F\xA1\x5\b\x5\x2\xA0\x9E\x3\x2\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA2"+
		"\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA4\x3\x2\x2"+
		"\x2\xA4\xA5\x5\n\x6\x2\xA5\xA6\aI\x2\x2\xA6\x5\x3\x2\x2\x2\xA7\xA8\aH"+
		"\x2\x2\xA8\xA9\a\x5\x2\x2\xA9\xAA\x5\x1C\xF\x2\xAA\xAB\aH\x2\x2\xAB\xAC"+
		"\x5\x1E\x10\x2\xAC\xB5\aI\x2\x2\xAD\xB1\aH\x2\x2\xAE\xB2\x5 \x11\x2\xAF"+
		"\xB2\x5\x42\"\x2\xB0\xB2\x5\"\x12\x2\xB1\xAE\x3\x2\x2\x2\xB1\xAF\x3\x2"+
		"\x2\x2\xB1\xB0\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB4\aI\x2\x2\xB4\xB6"+
		"\x3\x2\x2\x2\xB5\xAD\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB8\x3\x2\x2"+
		"\x2\xB7\xB5\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xBA\aI\x2\x2\xBA\a\x3"+
		"\x2\x2\x2\xBB\xBC\aH\x2\x2\xBC\xBD\a\x6\x2\x2\xBD\xBE\t\x2\x2\x2\xBE\xC1"+
		"\x5\f\a\x2\xBF\xC2\x5\x10\t\x2\xC0\xC2\x5\b\x5\x2\xC1\xBF\x3\x2\x2\x2"+
		"\xC1\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC3\xC1\x3"+
		"\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC6\aI\x2\x2\xC6\t\x3\x2\x2\x2\xC7\xC8"+
		"\aH\x2\x2\xC8\xC9\a\t\x2\x2\xC9\xCA\t\x3\x2\x2\xCA\xCB\x5\x8EH\x2\xCB"+
		"\xCC\aI\x2\x2\xCC\v\x3\x2\x2\x2\xCD\xCE\aH\x2\x2\xCE\xCF\a\f\x2\x2\xCF"+
		"\xD0\x5t;\x2\xD0\xD1\aI\x2\x2\xD1\r\x3\x2\x2\x2\xD2\xE0\aH\x2\x2\xD3\xE1"+
		"\x5*\x16\x2\xD4\xE1\x5\x1E\x10\x2\xD5\xE1\x5 \x11\x2\xD6\xE1\x5\x30\x19"+
		"\x2\xD7\xE1\x5\x32\x1A\x2\xD8\xE1\x5\x38\x1D\x2\xD9\xE1\x5:\x1E\x2\xDA"+
		"\xE1\x5\x34\x1B\x2\xDB\xE1\x5\x36\x1C\x2\xDC\xE1\x5<\x1F\x2\xDD\xE1\x5"+
		"@!\x2\xDE\xE1\x5> \x2\xDF\xE1\x5\x42\"\x2\xE0\xD3\x3\x2\x2\x2\xE0\xD4"+
		"\x3\x2\x2\x2\xE0\xD5\x3\x2\x2\x2\xE0\xD6\x3\x2\x2\x2\xE0\xD7\x3\x2\x2"+
		"\x2\xE0\xD8\x3\x2\x2\x2\xE0\xD9\x3\x2\x2\x2\xE0\xDA\x3\x2\x2\x2\xE0\xDB"+
		"\x3\x2\x2\x2\xE0\xDC\x3\x2\x2\x2\xE0\xDD\x3\x2\x2\x2\xE0\xDE\x3\x2\x2"+
		"\x2\xE0\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3\aI\x2\x2\xE3\xE6\x3"+
		"\x2\x2\x2\xE4\xE6\x5\x16\f\x2\xE5\xD2\x3\x2\x2\x2\xE5\xE4\x3\x2\x2\x2"+
		"\xE6\xF\x3\x2\x2\x2\xE7\xE8\aH\x2\x2\xE8\xE9\a\r\x2\x2\xE9\xEB\aH\x2\x2"+
		"\xEA\xEC\x5\x14\v\x2\xEB\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEE\x3"+
		"\x2\x2\x2\xED\xEB\x3\x2\x2\x2\xEE\xEF\x3\x2\x2\x2\xEF\xF0\aI\x2\x2\xF0"+
		"\xF1\aI\x2\x2\xF1\x100\x3\x2\x2\x2\xF2\xF3\aH\x2\x2\xF3\xF4\a\xE\x2\x2"+
		"\xF4\xF6\aH\x2\x2\xF5\xF7\x5\x14\v\x2\xF6\xF5\x3\x2\x2\x2\xF7\xF8\x3\x2"+
		"\x2\x2\xF8\xF9\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA"+
		"\xFB\aI\x2\x2\xFB\xFC\aI\x2\x2\xFC\x100\x3\x2\x2\x2\xFD\x100\x5\x16\f"+
		"\x2\xFE\x100\x5\x18\r\x2\xFF\xE7\x3\x2\x2\x2\xFF\xF2\x3\x2\x2\x2\xFF\xFD"+
		"\x3\x2\x2\x2\xFF\xFE\x3\x2\x2\x2\x100\x11\x3\x2\x2\x2\x101\x102\aH\x2"+
		"\x2\x102\x103\a\xE\x2\x2\x103\x105\aH\x2\x2\x104\x106\x5\x14\v\x2\x105"+
		"\x104\x3\x2\x2\x2\x106\x107\x3\x2\x2\x2\x107\x108\x3\x2\x2\x2\x107\x105"+
		"\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10A\aI\x2\x2\x10A\x10B\aI\x2"+
		"\x2\x10B\x10F\x3\x2\x2\x2\x10C\x10F\x5\x16\f\x2\x10D\x10F\x5\x18\r\x2"+
		"\x10E\x101\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10D\x3\x2\x2\x2\x10F"+
		"\x13\x3\x2\x2\x2\x110\x111\aH\x2\x2\x111\x112\x5t;\x2\x112\x113\x5\x12"+
		"\n\x2\x113\x114\aI\x2\x2\x114\x11D\x3\x2\x2\x2\x115\x11D\x5\x12\n\x2\x116"+
		"\x117\aH\x2\x2\x117\x118\x5t;\x2\x118\x119\x5\xE\b\x2\x119\x11A\aI\x2"+
		"\x2\x11A\x11D\x3\x2\x2\x2\x11B\x11D\x5\xE\b\x2\x11C\x110\x3\x2\x2\x2\x11C"+
		"\x115\x3\x2\x2\x2\x11C\x116\x3\x2\x2\x2\x11C\x11B\x3\x2\x2\x2\x11D\x15"+
		"\x3\x2\x2\x2\x11E\x11F\aH\x2\x2\x11F\x120\t\x4\x2\x2\x120\x121\x5\x66"+
		"\x34\x2\x121\x126\x5\x2\x2\x2\x122\x127\x5\x14\v\x2\x123\x127\x5t;\x2"+
		"\x124\x127\x5J&\x2\x125\x127\x5H%\x2\x126\x122\x3\x2\x2\x2\x126\x123\x3"+
		"\x2\x2\x2\x126\x124\x3\x2\x2\x2\x126\x125\x3\x2\x2\x2\x127\x128\x3\x2"+
		"\x2\x2\x128\x129\aI\x2\x2\x129\x17\x3\x2\x2\x2\x12A\x12B\aH\x2\x2\x12B"+
		"\x12C\a\x11\x2\x2\x12C\x12D\x5\x64\x33\x2\x12D\x131\x5\x2\x2\x2\x12E\x132"+
		"\x5\x10\t\x2\x12F\x132\x5\xE\b\x2\x130\x132\x5\x14\v\x2\x131\x12E\x3\x2"+
		"\x2\x2\x131\x12F\x3\x2\x2\x2\x131\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2"+
		"\x2\x133\x134\aI\x2\x2\x134\x19\x3\x2\x2\x2\x135\x136\aH\x2\x2\x136\x137"+
		"\a\x12\x2\x2\x137\x138\x5\x64\x33\x2\x138\x139\x5\x2\x2\x2\x139\x13A\a"+
		"I\x2\x2\x13A\x1B\x3\x2\x2\x2\x13B\x13C\aH\x2\x2\x13C\x13D\a\x13\x2\x2"+
		"\x13D\x140\a\x14\x2\x2\x13E\x141\x5\x2\x2\x2\x13F\x141\x5\x8EH\x2\x140"+
		"\x13E\x3\x2\x2\x2\x140\x13F\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143"+
		"\aI\x2\x2\x143\x1D\x3\x2\x2\x2\x144\x145\a\x13\x2\x2\x145\x147\a\x15\x2"+
		"\x2\x146\x148\x5&\x14\x2\x147\x146\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149"+
		"\x14A\x3\x2\x2\x2\x149\x147\x3\x2\x2\x2\x14A\x1F\x3\x2\x2\x2\x14B\x14C"+
		"\a\x13\x2\x2\x14C\x14D\a\x16\x2\x2\x14D\x14E\x5J&\x2\x14E\x14F\x5$\x13"+
		"\x2\x14F!\x3\x2\x2\x2\x150\x151\a\x13\x2\x2\x151\x152\a\x17\x2\x2\x152"+
		"\x153\a\x46\x2\x2\x153#\x3\x2\x2\x2\x154\x155\aH\x2\x2\x155\x157\a\x16"+
		"\x2\x2\x156\x158\x5(\x15\x2\x157\x156\x3\x2\x2\x2\x158\x159\x3\x2\x2\x2"+
		"\x159\x15A\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B"+
		"\x15C\aI\x2\x2\x15C%\x3\x2\x2\x2\x15D\x162\aH\x2\x2\x15E\x15F\a\x46\x2"+
		"\x2\x15F\x161\a\x18\x2\x2\x160\x15E\x3\x2\x2\x2\x161\x164\x3\x2\x2\x2"+
		"\x162\x163\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x165\x3\x2\x2\x2\x164"+
		"\x162\x3\x2\x2\x2\x165\x169\a\x46\x2\x2\x166\x168\x5&\x14\x2\x167\x166"+
		"\x3\x2\x2\x2\x168\x16B\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x169\x167\x3"+
		"\x2\x2\x2\x16A\x16C\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16C\x16D\aI\x2"+
		"\x2\x16D\'\x3\x2\x2\x2\x16E\x16F\aH\x2\x2\x16F\x170\x5\x2\x2\x2\x170\x171"+
		"\aI\x2\x2\x171\x185\x3\x2\x2\x2\x172\x178\aH\x2\x2\x173\x174\x5\x90I\x2"+
		"\x174\x175\a\x18\x2\x2\x175\x177\x3\x2\x2\x2\x176\x173\x3\x2\x2\x2\x177"+
		"\x17A\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x179\x17B"+
		"\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17B\x17F\x5\x90I\x2\x17C\x17E\x5("+
		"\x15\x2\x17D\x17C\x3\x2\x2\x2\x17E\x181\x3\x2\x2\x2\x17F\x180\x3\x2\x2"+
		"\x2\x17F\x17D\x3\x2\x2\x2\x180\x182\x3\x2\x2\x2\x181\x17F\x3\x2\x2\x2"+
		"\x182\x183\aI\x2\x2\x183\x185\x3\x2\x2\x2\x184\x16E\x3\x2\x2\x2\x184\x172"+
		"\x3\x2\x2\x2\x185)\x3\x2\x2\x2\x186\x187\a\x19\x2\x2\x187\x188\a\x1A\x2"+
		"\x2\x188\x189\x5\x2\x2\x2\x189\x18B\aH\x2\x2\x18A\x18C\x5,\x17\x2\x18B"+
		"\x18A\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18E\x3\x2\x2\x2\x18D\x18B"+
		"\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18F\x190\aI\x2\x2\x190+\x3\x2\x2\x2"+
		"\x191\x193\aH\x2\x2\x192\x194\x5.\x18\x2\x193\x192\x3\x2\x2\x2\x194\x195"+
		"\x3\x2\x2\x2\x195\x196\x3\x2\x2\x2\x195\x193\x3\x2\x2\x2\x196\x197\x3"+
		"\x2\x2\x2\x197\x198\x5\x8EH\x2\x198\x199\aI\x2\x2\x199-\x3\x2\x2\x2\x19A"+
		"\x19B\aH\x2\x2\x19B\x1A1\x5\x90I\x2\x19C\x19D\aH\x2\x2\x19D\x19E\x5\x90"+
		"I\x2\x19E\x19F\aI\x2\x2\x19F\x1A2\x3\x2\x2\x2\x1A0\x1A2\x5r:\x2\x1A1\x19C"+
		"\x3\x2\x2\x2\x1A1\x1A0\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A4\aI"+
		"\x2\x2\x1A4/\x3\x2\x2\x2\x1A5\x1A6\a\x1B\x2\x2\x1A6\x1AB\t\x5\x2\x2\x1A7"+
		"\x1AC\x5^\x30\x2\x1A8\x1AC\a\x1D\x2\x2\x1A9\x1AC\a\x1C\x2\x2\x1AA\x1AC"+
		"\a\x1E\x2\x2\x1AB\x1A7\x3\x2\x2\x2\x1AB\x1A8\x3\x2\x2\x2\x1AB\x1A9\x3"+
		"\x2\x2\x2\x1AB\x1AA\x3\x2\x2\x2\x1AC\x31\x3\x2\x2\x2\x1AD\x1AE\a\x1F\x2"+
		"\x2\x1AE\x1AF\x5H%\x2\x1AF\x1B0\x5\x8EH\x2\x1B0\x33\x3\x2\x2\x2\x1B1\x1B2"+
		"\a \x2\x2\x1B2\x1B3\x5H%\x2\x1B3\x1B4\x5\x8EH\x2\x1B4\x35\x3\x2\x2\x2"+
		"\x1B5\x1B6\a!\x2\x2\x1B6\x1B7\x5H%\x2\x1B7\x1B8\x5\x8EH\x2\x1B8\x37\x3"+
		"\x2\x2\x2\x1B9\x1BA\a\"\x2\x2\x1BA\x1BB\x5\x44#\x2\x1BB\x1BC\x5\x44#\x2"+
		"\x1BC\x39\x3\x2\x2\x2\x1BD\x1BE\a#\x2\x2\x1BE\x1BF\x5\x44#\x2\x1BF\x1C0"+
		"\x5\x44#\x2\x1C0;\x3\x2\x2\x2\x1C1\x1C2\a$\x2\x2\x1C2\x1C3\x5\x44#\x2"+
		"\x1C3=\x3\x2\x2\x2\x1C4\x1C5\a%\x2\x2\x1C5\x1C6\x5J&\x2\x1C6?\x3\x2\x2"+
		"\x2\x1C7\x1C8\a&\x2\x2\x1C8\x1C9\a\'\x2\x2\x1C9\x41\x3\x2\x2\x2\x1CA\x1CB"+
		"\a(\x2\x2\x1CB\x1CC\x5\x8EH\x2\x1CC\x1CD\x5\xE\b\x2\x1CD\x1D5\x3\x2\x2"+
		"\x2\x1CE\x1CF\a(\x2\x2\x1CF\x1D0\a\x10\x2\x2\x1D0\x1D1\aH\x2\x2\x1D1\x1D2"+
		"\x5\x38\x1D\x2\x1D2\x1D3\aI\x2\x2\x1D3\x1D5\x3\x2\x2\x2\x1D4\x1CA\x3\x2"+
		"\x2\x2\x1D4\x1CE\x3\x2\x2\x2\x1D5\x43\x3\x2\x2\x2\x1D6\x1E4\x5\x2\x2\x2"+
		"\x1D7\x1E4\x5\x84\x43\x2\x1D8\x1E4\x5\x86\x44\x2\x1D9\x1E4\x5\x46$\x2"+
		"\x1DA\x1DE\aH\x2\x2\x1DB\x1DF\a)\x2\x2\x1DC\x1DF\a*\x2\x2\x1DD\x1DF\x5"+
		"\x8EH\x2\x1DE\x1DB\x3\x2\x2\x2\x1DE\x1DC\x3\x2\x2\x2\x1DE\x1DD\x3\x2\x2"+
		"\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E1\x5J&\x2\x1E1\x1E2\aI\x2\x2\x1E2\x1E4"+
		"\x3\x2\x2\x2\x1E3\x1D6\x3\x2\x2\x2\x1E3\x1D7\x3\x2\x2\x2\x1E3\x1D8\x3"+
		"\x2\x2\x2\x1E3\x1D9\x3\x2\x2\x2\x1E3\x1DA\x3\x2\x2\x2\x1E4\x45\x3\x2\x2"+
		"\x2\x1E5\x1E6\aH\x2\x2\x1E6\x1E7\a+\x2\x2\x1E7\x1E8\x5\x44#\x2\x1E8\x1E9"+
		"\aI\x2\x2\x1E9G\x3\x2\x2\x2\x1EA\x1EE\aH\x2\x2\x1EB\x1EF\x5\x2\x2\x2\x1EC"+
		"\x1EF\a\x4\x2\x2\x1ED\x1EF\x5V,\x2\x1EE\x1EB\x3\x2\x2\x2\x1EE\x1EC\x3"+
		"\x2\x2\x2\x1EE\x1ED\x3\x2\x2\x2\x1EF\x1F0\x3\x2\x2\x2\x1F0\x1F3\a,\x2"+
		"\x2\x1F1\x1F4\x5\x90I\x2\x1F2\x1F4\x5\x2\x2\x2\x1F3\x1F1\x3\x2\x2\x2\x1F3"+
		"\x1F2\x3\x2\x2\x2\x1F4\x1F5\x3\x2\x2\x2\x1F5\x1F6\aI\x2\x2\x1F6I\x3\x2"+
		"\x2\x2\x1F7\x205\x5\x2\x2\x2\x1F8\x205\x5\x88\x45\x2\x1F9\x205\x5n\x38"+
		"\x2\x1FA\x1FB\aH\x2\x2\x1FB\x1FC\x5R*\x2\x1FC\x1FF\x5T+\x2\x1FD\x200\x5"+
		"\x90I\x2\x1FE\x200\x5\x2\x2\x2\x1FF\x1FD\x3\x2\x2\x2\x1FF\x1FE\x3\x2\x2"+
		"\x2\x200\x201\x3\x2\x2\x2\x201\x202\aI\x2\x2\x202\x205\x3\x2\x2\x2\x203"+
		"\x205\x5L\'\x2\x204\x1F7\x3\x2\x2\x2\x204\x1F8\x3\x2\x2\x2\x204\x1F9\x3"+
		"\x2\x2\x2\x204\x1FA\x3\x2\x2\x2\x204\x203\x3\x2\x2\x2\x205K\x3\x2\x2\x2"+
		"\x206\x20A\aH\x2\x2\x207\x20B\a)\x2\x2\x208\x20B\a*\x2\x2\x209\x20B\x5"+
		"\x8EH\x2\x20A\x207\x3\x2\x2\x2\x20A\x208\x3\x2\x2\x2\x20A\x209\x3\x2\x2"+
		"\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20D\x5N(\x2\x20D\x20E\aI\x2\x2\x20EM\x3"+
		"\x2\x2\x2\x20F\x210\x5P)\x2\x210O\x3\x2\x2\x2\x211\x212\aH\x2\x2\x212"+
		"\x213\a-\x2\x2\x213\x214\x5\x8EH\x2\x214\x215\x5J&\x2\x215\x216\a.\x2"+
		"\x2\x216\x217\x5\x2\x2\x2\x217\x218\aI\x2\x2\x218Q\x3\x2\x2\x2\x219\x21D"+
		"\x5\x2\x2\x2\x21A\x21D\a\x4\x2\x2\x21B\x21D\x5X-\x2\x21C\x219\x3\x2\x2"+
		"\x2\x21C\x21A\x3\x2\x2\x2\x21C\x21B\x3\x2\x2\x2\x21DS\x3\x2\x2\x2\x21E"+
		"\x21F\t\x6\x2\x2\x21FU\x3\x2\x2\x2\x220\x223\x5Z.\x2\x221\x223\x5X-\x2"+
		"\x222\x220\x3\x2\x2\x2\x222\x221\x3\x2\x2\x2\x223W\x3\x2\x2\x2\x224\x225"+
		"\aH\x2\x2\x225\x226\x5\\/\x2\x226\x227\a\a\x2\x2\x227\x228\aI\x2\x2\x228"+
		"\x22B\x3\x2\x2\x2\x229\x22B\x5^\x30\x2\x22A\x224\x3\x2\x2\x2\x22A\x229"+
		"\x3\x2\x2\x2\x22BY\x3\x2\x2\x2\x22C\x22D\aH\x2\x2\x22D\x22E\x5\\/\x2\x22E"+
		"\x22F\a\b\x2\x2\x22F\x230\aI\x2\x2\x230\x233\x3\x2\x2\x2\x231\x233\x5"+
		"`\x31\x2\x232\x22C\x3\x2\x2\x2\x232\x231\x3\x2\x2\x2\x233[\x3\x2\x2\x2"+
		"\x234\x239\x5\x8EH\x2\x235\x239\a\x1E\x2\x2\x236\x239\a\x1C\x2\x2\x237"+
		"\x239\a\x1D\x2\x2\x238\x234\x3\x2\x2\x2\x238\x235\x3\x2\x2\x2\x238\x236"+
		"\x3\x2\x2\x2\x238\x237\x3\x2\x2\x2\x239]\x3\x2\x2\x2\x23A\x23B\aH\x2\x2"+
		"\x23B\x23C\a\x33\x2\x2\x23C\x23D\x5\x44#\x2\x23D\x23E\aI\x2\x2\x23E_\x3"+
		"\x2\x2\x2\x23F\x240\aH\x2\x2\x240\x241\a\b\x2\x2\x241\x242\x5X-\x2\x242"+
		"\x243\aI\x2\x2\x243\x61\x3\x2\x2\x2\x244\x245\aH\x2\x2\x245\x246\a\x34"+
		"\x2\x2\x246\x247\t\x2\x2\x2\x247\x248\aI\x2\x2\x248\x63\x3\x2\x2\x2\x249"+
		"\x24F\x5\x2\x2\x2\x24A\x24F\x5\x8EH\x2\x24B\x24F\x5t;\x2\x24C\x24F\x5"+
		"\x90I\x2\x24D\x24F\x5\x66\x34\x2\x24E\x249\x3\x2\x2\x2\x24E\x24A\x3\x2"+
		"\x2\x2\x24E\x24B\x3\x2\x2\x2\x24E\x24C\x3\x2\x2\x2\x24E\x24D\x3\x2\x2"+
		"\x2\x24F\x65\x3\x2\x2\x2\x250\x25B\x5\x2\x2\x2\x251\x25B\x5J&\x2\x252"+
		"\x25B\x5h\x35\x2\x253\x25B\x5j\x36\x2\x254\x25B\a\a\x2\x2\x255\x25B\a"+
		"\b\x2\x2\x256\x25B\x5Z.\x2\x257\x25B\x5\x62\x32\x2\x258\x25B\x5l\x37\x2"+
		"\x259\x25B\x5n\x38\x2\x25A\x250\x3\x2\x2\x2\x25A\x251\x3\x2\x2\x2\x25A"+
		"\x252\x3\x2\x2\x2\x25A\x253\x3\x2\x2\x2\x25A\x254\x3\x2\x2\x2\x25A\x255"+
		"\x3\x2\x2\x2\x25A\x256\x3\x2\x2\x2\x25A\x257\x3\x2\x2\x2\x25A\x258\x3"+
		"\x2\x2\x2\x25A\x259\x3\x2\x2\x2\x25Bg\x3\x2\x2\x2\x25C\x262\aH\x2\x2\x25D"+
		"\x25E\x5\x90I\x2\x25E\x25F\a\x18\x2\x2\x25F\x261\x3\x2\x2\x2\x260\x25D"+
		"\x3\x2\x2\x2\x261\x264\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x262\x260\x3"+
		"\x2\x2\x2\x263\x265\x3\x2\x2\x2\x264\x262\x3\x2\x2\x2\x265\x266\x5\x90"+
		"I\x2\x266\x267\aI\x2\x2\x267i\x3\x2\x2\x2\x268\x26C\x5N(\x2\x269\x26C"+
		"\x5\x16\f\x2\x26A\x26C\x5\x18\r\x2\x26B\x268\x3\x2\x2\x2\x26B\x269\x3"+
		"\x2\x2\x2\x26B\x26A\x3\x2\x2\x2\x26Ck\x3\x2\x2\x2\x26D\x26E\aH\x2\x2\x26E"+
		"\x26F\a\x35\x2\x2\x26F\x270\x5\x8EH\x2\x270\x271\a\x36\x2\x2\x271\x272"+
		"\x5\x8EH\x2\x272\x273\aI\x2\x2\x273m\x3\x2\x2\x2\x274\x275\aH\x2\x2\x275"+
		"\x276\a\x37\x2\x2\x276\x277\x5\x66\x34\x2\x277\x278\x5\x2\x2\x2\x278\x279"+
		"\x5t;\x2\x279\x27A\aI\x2\x2\x27Ao\x3\x2\x2\x2\x27B\x27C\a\x44\x2\x2\x27C"+
		"\x27D\x5r:\x2\x27D\x27E\x5r:\x2\x27Eq\x3\x2\x2\x2\x27F\x28B\x5\x2\x2\x2"+
		"\x280\x28B\x5\x90I\x2\x281\x282\aH\x2\x2\x282\x285\a\x38\x2\x2\x283\x286"+
		"\x5\x2\x2\x2\x284\x286\x5\x90I\x2\x285\x283\x3\x2\x2\x2\x285\x284\x3\x2"+
		"\x2\x2\x286\x287\x3\x2\x2\x2\x287\x288\x5\x44#\x2\x288\x289\aI\x2\x2\x289"+
		"\x28B\x3\x2\x2\x2\x28A\x27F\x3\x2\x2\x2\x28A\x280\x3\x2\x2\x2\x28A\x281"+
		"\x3\x2\x2\x2\x28Bs\x3\x2\x2\x2\x28C\x2A7\aH\x2\x2\x28D\x28E\a\x42\x2\x2"+
		"\x28E\x290\x5t;\x2\x28F\x291\x5t;\x2\x290\x28F\x3\x2\x2\x2\x291\x292\x3"+
		"\x2\x2\x2\x292\x293\x3\x2\x2\x2\x292\x290\x3\x2\x2\x2\x293\x2A8\x3\x2"+
		"\x2\x2\x294\x295\x5v<\x2\x295\x296\x5\x8EH\x2\x296\x297\x5\x8EH\x2\x297"+
		"\x2A8\x3\x2\x2\x2\x298\x2A8\x5p\x39\x2\x299\x29A\a\x44\x2\x2\x29A\x29B"+
		"\x5\x44#\x2\x29B\x29C\x5\x44#\x2\x29C\x2A8\x3\x2\x2\x2\x29D\x29E\a\x45"+
		"\x2\x2\x29E\x2A8\x5t;\x2\x29F\x2A0\a\x44\x2\x2\x2A0\x2A1\x5X-\x2\x2A1"+
		"\x2A2\x5X-\x2\x2A2\x2A8\x3\x2\x2\x2\x2A3\x2A4\a\x44\x2\x2\x2A4\x2A5\x5"+
		"Z.\x2\x2A5\x2A6\x5Z.\x2\x2A6\x2A8\x3\x2\x2\x2\x2A7\x28D\x3\x2\x2\x2\x2A7"+
		"\x294\x3\x2\x2\x2\x2A7\x298\x3\x2\x2\x2\x2A7\x299\x3\x2\x2\x2\x2A7\x29D"+
		"\x3\x2\x2\x2\x2A7\x29F\x3\x2\x2\x2\x2A7\x2A3\x3\x2\x2\x2\x2A8\x2A9\x3"+
		"\x2\x2\x2\x2A9\x2AA\aI\x2\x2\x2AA\x2AD\x3\x2\x2\x2\x2AB\x2AD\x5\x16\f"+
		"\x2\x2AC\x28C\x3\x2\x2\x2\x2AC\x2AB\x3\x2\x2\x2\x2ADu\x3\x2\x2\x2\x2AE"+
		"\x2AF\t\a\x2\x2\x2AFw\x3\x2\x2\x2\x2B0\x2B1\aH\x2\x2\x2B1\x2B2\a\x39\x2"+
		"\x2\x2B2\x2B3\x5\x8EH\x2\x2B3\x2B4\x5\x8EH\x2\x2B4\x2B5\aI\x2\x2\x2B5"+
		"y\x3\x2\x2\x2\x2B6\x2B7\aH\x2\x2\x2B7\x2B8\a:\x2\x2\x2B8\x2B9\x5\x8EH"+
		"\x2\x2B9\x2BA\x5\x8EH\x2\x2BA\x2BB\aI\x2\x2\x2BB{\x3\x2\x2\x2\x2BC\x2BD"+
		"\aH\x2\x2\x2BD\x2BE\a;\x2\x2\x2BE\x2BF\x5\x8EH\x2\x2BF\x2C0\x5\x8EH\x2"+
		"\x2C0\x2C1\aI\x2\x2\x2C1}\x3\x2\x2\x2\x2C2\x2C3\aH\x2\x2\x2C3\x2C4\a<"+
		"\x2\x2\x2C4\x2C5\x5\x8EH\x2\x2C5\x2C6\x5\x8EH\x2\x2C6\x2C7\aI\x2\x2\x2C7"+
		"\x7F\x3\x2\x2\x2\x2C8\x2C9\aH\x2\x2\x2C9\x2CA\a=\x2\x2\x2CA\x2CB\x5\x8E"+
		"H\x2\x2CB\x2CC\x5\x8EH\x2\x2CC\x2CD\aI\x2\x2\x2CD\x81\x3\x2\x2\x2\x2CE"+
		"\x2CF\aH\x2\x2\x2CF\x2D3\a>\x2\x2\x2D0\x2D4\x5\x2\x2\x2\x2D1\x2D4\x5J"+
		"&\x2\x2D2\x2D4\x5N(\x2\x2D3\x2D0\x3\x2\x2\x2\x2D3\x2D1\x3\x2\x2\x2\x2D3"+
		"\x2D2\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2D6\aI\x2\x2\x2D6\x83\x3"+
		"\x2\x2\x2\x2D7\x2D8\aH\x2\x2\x2D8\x2D9\a\v\x2\x2\x2D9\x2DA\x5J&\x2\x2DA"+
		"\x2DB\a.\x2\x2\x2DB\x2DC\x5\x2\x2\x2\x2DC\x2DD\aI\x2\x2\x2DD\x85\x3\x2"+
		"\x2\x2\x2DE\x2DF\aH\x2\x2\x2DF\x2E0\a\n\x2\x2\x2E0\x2E1\x5J&\x2\x2E1\x2E2"+
		"\a.\x2\x2\x2E2\x2E3\x5\x2\x2\x2\x2E3\x2E4\aI\x2\x2\x2E4\x87\x3\x2\x2\x2"+
		"\x2E5\x2E6\aH\x2\x2\x2E6\x2ED\a?\x2\x2\x2E7\x2EE\x5\x16\f\x2\x2E8\x2EA"+
		"\x5J&\x2\x2E9\x2E8\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2"+
		"\x2\x2EB\x2E9\x3\x2\x2\x2\x2EC\x2EE\x3\x2\x2\x2\x2ED\x2E7\x3\x2\x2\x2"+
		"\x2ED\x2E9\x3\x2\x2\x2\x2EE\x2EF\x3\x2\x2\x2\x2EF\x2F0\aI\x2\x2\x2F0\x89"+
		"\x3\x2\x2\x2\x2F1\x2F2\aH\x2\x2\x2F2\x2F3\a@\x2\x2\x2F3\x2F4\x5J&\x2\x2F4"+
		"\x2F5\a.\x2\x2\x2F5\x2F6\x5\x2\x2\x2\x2F6\x2F7\aI\x2\x2\x2F7\x8B\x3\x2"+
		"\x2\x2\x2F8\x2F9\aH\x2\x2\x2F9\x2FA\a\x41\x2\x2\x2FA\x2FB\x5\x44#\x2\x2FB"+
		"\x2FC\a.\x2\x2\x2FC\x2FD\x5\x2\x2\x2\x2FD\x2FE\aI\x2\x2\x2FE\x8D\x3\x2"+
		"\x2\x2\x2FF\x30F\x5\x2\x2\x2\x300\x30F\x5\x82\x42\x2\x301\x30F\x5z>\x2"+
		"\x302\x30F\x5|?\x2\x303\x30F\x5~@\x2\x304\x30F\x5x=\x2\x305\x30F\x5\x80"+
		"\x41\x2\x306\x30F\x5\x8A\x46\x2\x307\x30F\x5H%\x2\x308\x30F\x5\x8CG\x2"+
		"\x309\x30B\a\x46\x2\x2\x30A\x309\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C"+
		"\x30A\x3\x2\x2\x2\x30C\x30D\x3\x2\x2\x2\x30D\x30F\x3\x2\x2\x2\x30E\x2FF"+
		"\x3\x2\x2\x2\x30E\x300\x3\x2\x2\x2\x30E\x301\x3\x2\x2\x2\x30E\x302\x3"+
		"\x2\x2\x2\x30E\x303\x3\x2\x2\x2\x30E\x304\x3\x2\x2\x2\x30E\x305\x3\x2"+
		"\x2\x2\x30E\x306\x3\x2\x2\x2\x30E\x307\x3\x2\x2\x2\x30E\x308\x3\x2\x2"+
		"\x2\x30E\x30A\x3\x2\x2\x2\x30F\x8F\x3\x2\x2\x2\x310\x312\aG\x2\x2\x311"+
		"\x310\x3\x2\x2\x2\x312\x313\x3\x2\x2\x2\x313\x311\x3\x2\x2\x2\x313\x314"+
		"\x3\x2\x2\x2\x314\x91\x3\x2\x2\x2;\x9A\xA0\xA2\xB1\xB7\xC1\xC3\xE0\xE5"+
		"\xED\xF8\xFF\x107\x10E\x11C\x126\x131\x140\x149\x159\x162\x169\x178\x17F"+
		"\x184\x18D\x195\x1A1\x1AB\x1D4\x1DE\x1E3\x1EE\x1F3\x1FF\x204\x20A\x21C"+
		"\x222\x22A\x232\x238\x24E\x25A\x262\x26B\x285\x28A\x292\x2A7\x2AC\x2D3"+
		"\x2EB\x2ED\x30C\x30E\x313";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
