//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, BOOLOP=65, COMPOP=66, 
		EQOP=67, UNOP=68, INTNUM=69, LETT=70, OPEN=71, CLOSE=72, WS=73, ANY=74;
	public const int
		RULE_var = 0, RULE_game = 1, RULE_setup = 2, RULE_stage = 3, RULE_scoring = 4, 
		RULE_endcondition = 5, RULE_action = 6, RULE_multiaction = 7, RULE_multiaction2 = 8, 
		RULE_condact = 9, RULE_agg = 10, RULE_let = 11, RULE_declare = 12, RULE_playercreate = 13, 
		RULE_teamcreate = 14, RULE_deckcreate = 15, RULE_dicecreate = 16, RULE_dice = 17, 
		RULE_deck = 18, RULE_teams = 19, RULE_attribute = 20, RULE_initpoints = 21, 
		RULE_awards = 22, RULE_subaward = 23, RULE_cycleaction = 24, RULE_setaction = 25, 
		RULE_incaction = 26, RULE_decaction = 27, RULE_moveaction = 28, RULE_copyaction = 29, 
		RULE_removeaction = 30, RULE_shuffleaction = 31, RULE_turnaction = 32, 
		RULE_repeat = 33, RULE_throwdice = 34, RULE_card = 35, RULE_actual = 36, 
		RULE_rawstorage = 37, RULE_cstorage = 38, RULE_memstorage = 39, RULE_memset = 40, 
		RULE_tuple = 41, RULE_locpre = 42, RULE_locdesc = 43, RULE_who = 44, RULE_whop = 45, 
		RULE_whot = 46, RULE_whodesc = 47, RULE_owner = 48, RULE_teamp = 49, RULE_other = 50, 
		RULE_typed = 51, RULE_collection = 52, RULE_strcollection = 53, RULE_cstoragecollection = 54, 
		RULE_range = 55, RULE_filter = 56, RULE_attrcomp = 57, RULE_cardatt = 58, 
		RULE_boolean = 59, RULE_intop = 60, RULE_add = 61, RULE_mult = 62, RULE_subtract = 63, 
		RULE_mod = 64, RULE_divide = 65, RULE_sizeof = 66, RULE_maxof = 67, RULE_minof = 68, 
		RULE_unionof = 69, RULE_sum = 70, RULE_score = 71, RULE_int = 72, RULE_namegr = 73;
	public static readonly string[] ruleNames = {
		"var", "game", "setup", "stage", "scoring", "endcondition", "action", 
		"multiaction", "multiaction2", "condact", "agg", "let", "declare", "playercreate", 
		"teamcreate", "deckcreate", "dicecreate", "dice", "deck", "teams", "attribute", 
		"initpoints", "awards", "subaward", "cycleaction", "setaction", "incaction", 
		"decaction", "moveaction", "copyaction", "removeaction", "shuffleaction", 
		"turnaction", "repeat", "throwdice", "card", "actual", "rawstorage", "cstorage", 
		"memstorage", "memset", "tuple", "locpre", "locdesc", "who", "whop", "whot", 
		"whodesc", "owner", "teamp", "other", "typed", "collection", "strcollection", 
		"cstoragecollection", "range", "filter", "attrcomp", "cardatt", "boolean", 
		"intop", "add", "mult", "subtract", "mod", "divide", "sizeof", "maxof", 
		"minof", "unionof", "sum", "score", "int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "'dice'", "','", 
		"'put'", "'points'", "'cycle'", "'next'", "'current'", "'previous'", "'set'", 
		"'inc'", "'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", "'turn'", 
		"'pass'", "'repeat'", "'throwdice'", "'top'", "'bottom'", "'actual'", 
		"'sto'", "'tuples'", "'using'", "'vloc'", "'iloc'", "'hloc'", "'mem'", 
		"'owner'", "'other'", "'range'", "'..'", "'filter'", "'cardatt'", "'+'", 
		"'*'", "'-'", "'%'", "'//'", "'size'", "'union'", "'sum'", "'score'", 
		null, null, null, "'not'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "BOOLOP", "COMPOP", "EQOP", "UNOP", "INTNUM", 
		"LETT", "OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(T__0);
			State = 149; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 2, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(OPEN);
			State = 152; Match(T__1);
			State = 156;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 153; declare();
					}
					} 
				}
				State = 158;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 159; setup();
			State = 162;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 162;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 160; multiaction();
						}
						break;
					case 2:
						{
						State = 161; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 166; scoring();
			State = 167; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public DicecreateContext[] dicecreate() {
			return GetRuleContexts<DicecreateContext>();
		}
		public DicecreateContext dicecreate(int i) {
			return GetRuleContext<DicecreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(OPEN);
			State = 170; Match(T__2);
			State = 171; playercreate();
			State = 172; Match(OPEN);
			State = 173; teamcreate();
			State = 174; Match(CLOSE);
			State = 183;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 175; Match(OPEN);
					State = 179;
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 176; deckcreate();
						}
						break;
					case 2:
						{
						State = 177; repeat();
						}
						break;
					case 3:
						{
						State = 178; dicecreate();
						}
						break;
					}
					State = 181; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 187; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 6, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(OPEN);
			State = 190; Match(T__3);
			State = 191;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 192; endcondition();
			State = 195;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 195;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 193; multiaction();
						}
						break;
					case 2:
						{
						State = 194; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 199; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 8, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; Match(OPEN);
			State = 202; Match(T__6);
			State = 203;
			_la = TokenStream.La(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 204; @int();
			State = 205; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(OPEN);
			State = 208; Match(T__9);
			State = 209; boolean();
			State = 210; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public ThrowdiceContext throwdice() {
			return GetRuleContext<ThrowdiceContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_action);
		try {
			State = 232;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212; Match(OPEN);
				State = 227;
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 213; initpoints();
					}
					break;
				case 2:
					{
					State = 214; teamcreate();
					}
					break;
				case 3:
					{
					State = 215; deckcreate();
					}
					break;
				case 4:
					{
					State = 216; cycleaction();
					}
					break;
				case 5:
					{
					State = 217; setaction();
					}
					break;
				case 6:
					{
					State = 218; moveaction();
					}
					break;
				case 7:
					{
					State = 219; copyaction();
					}
					break;
				case 8:
					{
					State = 220; incaction();
					}
					break;
				case 9:
					{
					State = 221; decaction();
					}
					break;
				case 10:
					{
					State = 222; removeaction();
					}
					break;
				case 11:
					{
					State = 223; turnaction();
					}
					break;
				case 12:
					{
					State = 224; shuffleaction();
					}
					break;
				case 13:
					{
					State = 225; repeat();
					}
					break;
				case 14:
					{
					State = 226; throwdice();
					}
					break;
				}
				State = 229; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction);
		try {
			int _alt;
			State = 258;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; Match(OPEN);
				State = 235; Match(T__10);
				State = 236; Match(OPEN);
				State = 238;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 237; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 240;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 242; Match(CLOSE);
				State = 243; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; Match(OPEN);
				State = 246; Match(T__11);
				State = 247; Match(OPEN);
				State = 249;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 248; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 251;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 253; Match(CLOSE);
				State = 254; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 256; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 257; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 16, RULE_multiaction2);
		try {
			int _alt;
			State = 273;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; Match(OPEN);
				State = 261; Match(T__11);
				State = 262; Match(OPEN);
				State = 264;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 263; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 266;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 268; Match(CLOSE);
				State = 269; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 18, RULE_condact);
		try {
			State = 287;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; Match(OPEN);
				State = 276; boolean();
				State = 277; multiaction2();
				State = 278; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 280; multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 281; Match(OPEN);
				State = 282; boolean();
				State = 283; action();
				State = 284; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 286; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 20, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(OPEN);
			State = 290;
			_la = TokenStream.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 291; collection();
			State = 292; var();
			State = 297;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 293; condact();
				}
				break;
			case 2:
				{
				State = 294; boolean();
				}
				break;
			case 3:
				{
				State = 295; cstorage();
				}
				break;
			case 4:
				{
				State = 296; rawstorage();
				}
				break;
			}
			State = 299; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 22, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301; Match(OPEN);
			State = 302; Match(T__14);
			State = 303; typed();
			State = 304; var();
			State = 308;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 305; multiaction();
				}
				break;
			case 2:
				{
				State = 306; action();
				}
				break;
			case 3:
				{
				State = 307; condact();
				}
				break;
			}
			State = 310; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 24, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; Match(OPEN);
			State = 313; Match(T__15);
			State = 314; typed();
			State = 315; var();
			State = 316; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318; Match(OPEN);
			State = 319; Match(T__16);
			State = 320; Match(T__17);
			State = 323;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 321; var();
				}
				break;
			case 2:
				{
				State = 322; @int();
				}
				break;
			}
			State = 325; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(T__16);
			State = 328; Match(T__18);
			State = 330;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 329; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 30, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(T__16);
			State = 335; Match(T__19);
			State = 336; cstorage();
			State = 337; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DicecreateContext : ParserRuleContext {
		public DiceContext[] dice() {
			return GetRuleContexts<DiceContext>();
		}
		public DiceContext dice(int i) {
			return GetRuleContext<DiceContext>(i);
		}
		public DicecreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dicecreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDicecreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDicecreate(this);
		}
	}

	[RuleVersion(0)]
	public DicecreateContext dicecreate() {
		DicecreateContext _localctx = new DicecreateContext(Context, State);
		EnterRule(_localctx, 32, RULE_dicecreate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(T__16);
			State = 340; Match(T__20);
			State = 342;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 341; dice();
				}
				}
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==OPEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiceContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dice; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDice(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDice(this);
		}
	}

	[RuleVersion(0)]
	public DiceContext dice() {
		DiceContext _localctx = new DiceContext(Context, State);
		EnterRule(_localctx, 34, RULE_dice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(OPEN);
			{
			State = 347; @int();
			}
			State = 348; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 36, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(OPEN);
			State = 351; Match(T__19);
			State = 353;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 352; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 355;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 357; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 38, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; Match(OPEN);
			State = 364;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 360; Match(INTNUM);
					State = 361; Match(T__21);
					}
					} 
				}
				State = 366;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 367; Match(INTNUM);
			State = 371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 368; teams();
					}
					} 
				}
				State = 373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 374; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 40, RULE_attribute);
		try {
			int _alt;
			State = 398;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376; Match(OPEN);
				State = 377; var();
				State = 378; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; Match(OPEN);
				State = 386;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 381; namegr();
						State = 382; Match(T__21);
						}
						} 
					}
					State = 388;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 389; namegr();
				State = 393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 390; attribute();
						}
						} 
					}
					State = 395;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 396; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 42, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(T__22);
			State = 401; Match(T__23);
			State = 402; var();
			State = 403; Match(OPEN);
			State = 405;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 404; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 409; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 44, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 411; Match(OPEN);
			State = 413;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 412; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 417; @int();
			State = 418; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 46, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 420; Match(OPEN);
			State = 421; namegr();
			State = 427;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 422; Match(OPEN);
				State = 423; namegr();
				State = 424; Match(CLOSE);
				}
				break;
			case 2:
				{
				State = 426; cardatt();
				}
				break;
			}
			State = 429; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(T__24);
			State = 432;
			_la = TokenStream.La(1);
			if ( !(_la==T__25 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 437;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 433; owner();
				}
				break;
			case T__26:
				{
				State = 434; Match(T__26);
				}
				break;
			case T__25:
				{
				State = 435; Match(T__25);
				}
				break;
			case T__27:
				{
				State = 436; Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; Match(T__28);
			State = 440; rawstorage();
			State = 441; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443; Match(T__29);
			State = 444; rawstorage();
			State = 445; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 447; Match(T__30);
			State = 448; rawstorage();
			State = 449; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(T__31);
			State = 452; card();
			State = 453; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 455; Match(T__32);
			State = 456; card();
			State = 457; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; Match(T__33);
			State = 460; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 62, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 462; Match(T__34);
			State = 463; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 64, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(T__35);
			State = 466; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 66, RULE_repeat);
		try {
			State = 478;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; Match(T__37);
				State = 469; @int();
				State = 470; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 472; Match(T__37);
				State = 473; Match(T__13);
				State = 474; Match(OPEN);
				State = 475; moveaction();
				State = 476; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowdiceContext : ParserRuleContext {
		public ThrowdiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwdice; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterThrowdice(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitThrowdice(this);
		}
	}

	[RuleVersion(0)]
	public ThrowdiceContext throwdice() {
		ThrowdiceContext _localctx = new ThrowdiceContext(Context, State);
		EnterRule(_localctx, 68, RULE_throwdice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480; Match(T__38);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 70, RULE_card);
		try {
			State = 495;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483; maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484; minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 485; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 486; Match(OPEN);
				State = 490;
				switch (TokenStream.La(1)) {
				case T__39:
					{
					State = 487; Match(T__39);
					}
					break;
				case T__40:
					{
					State = 488; Match(T__40);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 489; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 492; cstorage();
				State = 493; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 72, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(OPEN);
			State = 498; Match(T__41);
			State = 499; card();
			State = 500; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 74, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 502; Match(OPEN);
			State = 506;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 503; var();
				}
				break;
			case T__1:
				{
				State = 504; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 505; who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 508; Match(T__42);
			State = 511;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 509; namegr();
				}
				break;
			case T__0:
				{
				State = 510; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 513; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 76, RULE_cstorage);
		try {
			State = 528;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 515; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516; unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 517; filter();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 518; Match(OPEN);
				State = 519; locpre();
				State = 520; locdesc();
				State = 523;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 521; namegr();
					}
					break;
				case T__0:
					{
					State = 522; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 525; Match(CLOSE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 527; memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 78, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 530; Match(OPEN);
			State = 534;
			switch (TokenStream.La(1)) {
			case T__39:
				{
				State = 531; Match(T__39);
				}
				break;
			case T__40:
				{
				State = 532; Match(T__40);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 533; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 536; memset();
			State = 537; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 80, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 539; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 82, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 541; Match(OPEN);
			State = 542; Match(T__43);
			State = 543; @int();
			State = 544; cstorage();
			State = 545; Match(T__44);
			State = 546; var();
			State = 547; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 84, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 549; var();
				}
				break;
			case T__1:
				{
				State = 550; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 551; whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 86, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 88, RULE_who);
		try {
			State = 558;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 556; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 557; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 90, RULE_whop);
		try {
			State = 566;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 560; Match(OPEN);
				State = 561; whodesc();
				State = 562; Match(T__4);
				State = 563; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 565; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 92, RULE_whot);
		try {
			State = 574;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 568; Match(OPEN);
				State = 569; whodesc();
				State = 570; Match(T__5);
				State = 571; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 94, RULE_whodesc);
		try {
			State = 580;
			switch (TokenStream.La(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576; @int();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 577; Match(T__27);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 3);
				{
				State = 578; Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 4);
				{
				State = 579; Match(T__26);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 96, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582; Match(OPEN);
			State = 583; Match(T__49);
			State = 584; card();
			State = 585; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 98, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587; Match(OPEN);
			State = 588; Match(T__5);
			State = 589; whop();
			State = 590; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 100, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 592; Match(OPEN);
			State = 593; Match(T__50);
			State = 594;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 595; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 102, RULE_typed);
		try {
			State = 602;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 597; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 598; @int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 599; boolean();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 600; namegr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 601; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 104, RULE_collection);
		try {
			State = 614;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 605; cstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 606; strcollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 607; cstoragecollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 608; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 609; Match(T__5);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 610; whot();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 611; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 612; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 613; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 106, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 616; Match(OPEN);
			State = 622;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 617; namegr();
					State = 618; Match(T__21);
					}
					} 
				}
				State = 624;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 625; namegr();
			State = 626; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 108, RULE_cstoragecollection);
		try {
			State = 631;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 628; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 630; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 110, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(OPEN);
			State = 634; Match(T__51);
			State = 635; @int();
			State = 636; Match(T__52);
			State = 637; @int();
			State = 638; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 112, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640; Match(OPEN);
			State = 641; Match(T__53);
			State = 642; collection();
			State = 643; var();
			State = 644; boolean();
			State = 645; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 114, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; Match(EQOP);
			State = 648; cardatt();
			State = 649; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 116, RULE_cardatt);
		try {
			State = 662;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 651; var();
				}
				break;
			case LETT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 652; namegr();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 653; Match(OPEN);
				State = 654; Match(T__54);
				State = 657;
				switch (TokenStream.La(1)) {
				case T__0:
					{
					State = 655; var();
					}
					break;
				case LETT:
					{
					State = 656; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 659; card();
				State = 660; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 118, RULE_boolean);
		try {
			int _alt;
			State = 696;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 664; Match(OPEN);
				State = 691;
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 665; Match(BOOLOP);
					State = 666; boolean();
					State = 668;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 667; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 670;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				case 2:
					{
					State = 672; intop();
					State = 673; @int();
					State = 674; @int();
					}
					break;
				case 3:
					{
					State = 676; attrcomp();
					}
					break;
				case 4:
					{
					State = 677; Match(EQOP);
					State = 678; card();
					State = 679; card();
					}
					break;
				case 5:
					{
					State = 681; Match(UNOP);
					State = 682; boolean();
					}
					break;
				case 6:
					{
					State = 683; Match(EQOP);
					State = 684; whop();
					State = 685; whop();
					}
					break;
				case 7:
					{
					State = 687; Match(EQOP);
					State = 688; whot();
					State = 689; whot();
					}
					break;
				}
				State = 693; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 120, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 122, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 700; Match(OPEN);
			State = 701; Match(T__55);
			State = 702; @int();
			State = 703; @int();
			State = 704; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 124, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 706; Match(OPEN);
			State = 707; Match(T__56);
			State = 708; @int();
			State = 709; @int();
			State = 710; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 126, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(OPEN);
			State = 713; Match(T__57);
			State = 714; @int();
			State = 715; @int();
			State = 716; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 128, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 718; Match(OPEN);
			State = 719; Match(T__58);
			State = 720; @int();
			State = 721; @int();
			State = 722; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 130, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724; Match(OPEN);
			State = 725; Match(T__59);
			State = 726; @int();
			State = 727; @int();
			State = 728; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 132, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730; Match(OPEN);
			State = 731; Match(T__60);
			State = 735;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 732; var();
				}
				break;
			case 2:
				{
				State = 733; cstorage();
				}
				break;
			case 3:
				{
				State = 734; memset();
				}
				break;
			}
			State = 737; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 134, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; Match(OPEN);
			State = 740; Match(T__8);
			State = 741; cstorage();
			State = 742; Match(T__44);
			State = 743; var();
			State = 744; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 136, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 746; Match(OPEN);
			State = 747; Match(T__7);
			State = 748; cstorage();
			State = 749; Match(T__44);
			State = 750; var();
			State = 751; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 138, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; Match(OPEN);
			State = 754; Match(T__61);
			State = 761;
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 755; agg();
				}
				break;
			case 2:
				{
				State = 757;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 756; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 759;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 763; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 140, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765; Match(OPEN);
			State = 766; Match(T__62);
			State = 767; cstorage();
			State = 768; Match(T__44);
			State = 769; var();
			State = 770; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 142, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 772; Match(OPEN);
			State = 773; Match(T__63);
			State = 774; card();
			State = 775; Match(T__44);
			State = 776; var();
			State = 777; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 144, RULE_int);
		try {
			int _alt;
			State = 794;
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 779; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 780; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 781; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 782; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 783; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 784; add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 785; divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 786; sum();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 787; rawstorage();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 788; score();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 790;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 789; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 792;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 146, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 797;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 796; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 799;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3L\x324\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x3\x2\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x3\x3\a\x3\x9D\n\x3\f\x3\xE\x3\xA0\v\x3\x3\x3\x3\x3\x3\x3\x6"+
		"\x3\xA5\n\x3\r\x3\xE\x3\xA6\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xB6\n\x4\x3\x4\x3\x4\x6\x4"+
		"\xBA\n\x4\r\x4\xE\x4\xBB\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x6\x5\xC6\n\x5\r\x5\xE\x5\xC7\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xE6\n\b\x3\b\x3\b\x3\b"+
		"\x5\b\xEB\n\b\x3\t\x3\t\x3\t\x3\t\x6\t\xF1\n\t\r\t\xE\t\xF2\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x6\t\xFC\n\t\r\t\xE\t\xFD\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x5\t\x105\n\t\x3\n\x3\n\x3\n\x3\n\x6\n\x10B\n\n\r\n\xE\n\x10C"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x114\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x122\n\v\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\f\x3\f\x5\f\x12C\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x5\r\x137\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x146\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3"+
		"\x10\x6\x10\x14D\n\x10\r\x10\xE\x10\x14E\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x6\x12\x159\n\x12\r\x12\xE\x12\x15A\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x6\x14\x164\n\x14\r\x14\xE\x14"+
		"\x165\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15\x16D\n\x15\f\x15\xE\x15"+
		"\x170\v\x15\x3\x15\x3\x15\a\x15\x174\n\x15\f\x15\xE\x15\x177\v\x15\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a"+
		"\x16\x183\n\x16\f\x16\xE\x16\x186\v\x16\x3\x16\x3\x16\a\x16\x18A\n\x16"+
		"\f\x16\xE\x16\x18D\v\x16\x3\x16\x3\x16\x5\x16\x191\n\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x17\x3\x17\x6\x17\x198\n\x17\r\x17\xE\x17\x199\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x6\x18\x1A0\n\x18\r\x18\xE\x18\x1A1\x3\x18\x3\x18\x3\x18"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x5\x19\x1AE\n\x19\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x1B8\n\x1A"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"#\x3#\x3#\x5#\x1E1\n#\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x1ED"+
		"\n%\x3%\x3%\x3%\x5%\x1F2\n%\x3&\x3&\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x5"+
		"\'\x1FD\n\'\x3\'\x3\'\x3\'\x5\'\x202\n\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3"+
		"(\x3(\x3(\x3(\x5(\x20E\n(\x3(\x3(\x3(\x5(\x213\n(\x3)\x3)\x3)\x3)\x5)"+
		"\x219\n)\x3)\x3)\x3)\x3*\x3*\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3+\x3,\x3,\x3"+
		",\x5,\x22B\n,\x3-\x3-\x3.\x3.\x5.\x231\n.\x3/\x3/\x3/\x3/\x3/\x3/\x5/"+
		"\x239\n/\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x241\n\x30\x3"+
		"\x31\x3\x31\x3\x31\x3\x31\x5\x31\x247\n\x31\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34"+
		"\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x25D\n\x35\x3\x36\x3"+
		"\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x269"+
		"\n\x36\x3\x37\x3\x37\x3\x37\x3\x37\a\x37\x26F\n\x37\f\x37\xE\x37\x272"+
		"\v\x37\x3\x37\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x5\x38\x27A\n\x38\x3"+
		"\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x3:\x3:\x3"+
		":\x3:\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x5<\x294\n<\x3<\x3<\x3<"+
		"\x5<\x299\n<\x3=\x3=\x3=\x3=\x6=\x29F\n=\r=\xE=\x2A0\x3=\x3=\x3=\x3=\x3"+
		"=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x5=\x2B6\n="+
		"\x3=\x3=\x3=\x5=\x2BB\n=\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3@\x3@\x3@\x3"+
		"@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x44"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x5\x44\x2E2\n\x44\x3\x44\x3\x44\x3\x45\x3"+
		"\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3"+
		"\x46\x3\x46\x3\x46\x3G\x3G\x3G\x3G\x6G\x2F8\nG\rG\xEG\x2F9\x5G\x2FC\n"+
		"G\x3G\x3G\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3I\x3I\x3I\x3I\x3I\x3I\x3I\x3J"+
		"\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x3J\x6J\x319\nJ\rJ\xEJ\x31A\x5J\x31D"+
		"\nJ\x3K\x6K\x320\nK\rK\xEK\x321\x3K\x14\x9E\xA6\xBB\xC7\xF2\xFD\x10C\x14E"+
		"\x165\x16E\x175\x184\x18B\x199\x1A1\x270\x2A0\x2F9\x2L\x2\x4\x6\b\n\f"+
		"\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42"+
		"\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A"+
		"\x8C\x8E\x90\x92\x94\x2\b\x3\x2\a\b\x3\x2\n\v\x3\x2\xF\x10\x3\x2\x1C\x1D"+
		"\x3\x2\x30\x33\x3\x2\x44\x45\x352\x2\x96\x3\x2\x2\x2\x4\x99\x3\x2\x2\x2"+
		"\x6\xAB\x3\x2\x2\x2\b\xBF\x3\x2\x2\x2\n\xCB\x3\x2\x2\x2\f\xD1\x3\x2\x2"+
		"\x2\xE\xEA\x3\x2\x2\x2\x10\x104\x3\x2\x2\x2\x12\x113\x3\x2\x2\x2\x14\x121"+
		"\x3\x2\x2\x2\x16\x123\x3\x2\x2\x2\x18\x12F\x3\x2\x2\x2\x1A\x13A\x3\x2"+
		"\x2\x2\x1C\x140\x3\x2\x2\x2\x1E\x149\x3\x2\x2\x2 \x150\x3\x2\x2\x2\"\x155"+
		"\x3\x2\x2\x2$\x15C\x3\x2\x2\x2&\x160\x3\x2\x2\x2(\x169\x3\x2\x2\x2*\x190"+
		"\x3\x2\x2\x2,\x192\x3\x2\x2\x2.\x19D\x3\x2\x2\x2\x30\x1A6\x3\x2\x2\x2"+
		"\x32\x1B1\x3\x2\x2\x2\x34\x1B9\x3\x2\x2\x2\x36\x1BD\x3\x2\x2\x2\x38\x1C1"+
		"\x3\x2\x2\x2:\x1C5\x3\x2\x2\x2<\x1C9\x3\x2\x2\x2>\x1CD\x3\x2\x2\x2@\x1D0"+
		"\x3\x2\x2\x2\x42\x1D3\x3\x2\x2\x2\x44\x1E0\x3\x2\x2\x2\x46\x1E2\x3\x2"+
		"\x2\x2H\x1F1\x3\x2\x2\x2J\x1F3\x3\x2\x2\x2L\x1F8\x3\x2\x2\x2N\x212\x3"+
		"\x2\x2\x2P\x214\x3\x2\x2\x2R\x21D\x3\x2\x2\x2T\x21F\x3\x2\x2\x2V\x22A"+
		"\x3\x2\x2\x2X\x22C\x3\x2\x2\x2Z\x230\x3\x2\x2\x2\\\x238\x3\x2\x2\x2^\x240"+
		"\x3\x2\x2\x2`\x246\x3\x2\x2\x2\x62\x248\x3\x2\x2\x2\x64\x24D\x3\x2\x2"+
		"\x2\x66\x252\x3\x2\x2\x2h\x25C\x3\x2\x2\x2j\x268\x3\x2\x2\x2l\x26A\x3"+
		"\x2\x2\x2n\x279\x3\x2\x2\x2p\x27B\x3\x2\x2\x2r\x282\x3\x2\x2\x2t\x289"+
		"\x3\x2\x2\x2v\x298\x3\x2\x2\x2x\x2BA\x3\x2\x2\x2z\x2BC\x3\x2\x2\x2|\x2BE"+
		"\x3\x2\x2\x2~\x2C4\x3\x2\x2\x2\x80\x2CA\x3\x2\x2\x2\x82\x2D0\x3\x2\x2"+
		"\x2\x84\x2D6\x3\x2\x2\x2\x86\x2DC\x3\x2\x2\x2\x88\x2E5\x3\x2\x2\x2\x8A"+
		"\x2EC\x3\x2\x2\x2\x8C\x2F3\x3\x2\x2\x2\x8E\x2FF\x3\x2\x2\x2\x90\x306\x3"+
		"\x2\x2\x2\x92\x31C\x3\x2\x2\x2\x94\x31F\x3\x2\x2\x2\x96\x97\a\x3\x2\x2"+
		"\x97\x98\x5\x94K\x2\x98\x3\x3\x2\x2\x2\x99\x9A\aI\x2\x2\x9A\x9E\a\x4\x2"+
		"\x2\x9B\x9D\x5\x1A\xE\x2\x9C\x9B\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2\x9E\x9F"+
		"\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA1\x3\x2\x2\x2\xA0\x9E\x3\x2\x2"+
		"\x2\xA1\xA4\x5\x6\x4\x2\xA2\xA5\x5\x10\t\x2\xA3\xA5\x5\b\x5\x2\xA4\xA2"+
		"\x3\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA7\x3\x2\x2"+
		"\x2\xA6\xA4\x3\x2\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9\x5\n\x6\x2\xA9\xAA"+
		"\aJ\x2\x2\xAA\x5\x3\x2\x2\x2\xAB\xAC\aI\x2\x2\xAC\xAD\a\x5\x2\x2\xAD\xAE"+
		"\x5\x1C\xF\x2\xAE\xAF\aI\x2\x2\xAF\xB0\x5\x1E\x10\x2\xB0\xB9\aJ\x2\x2"+
		"\xB1\xB5\aI\x2\x2\xB2\xB6\x5 \x11\x2\xB3\xB6\x5\x44#\x2\xB4\xB6\x5\"\x12"+
		"\x2\xB5\xB2\x3\x2\x2\x2\xB5\xB3\x3\x2\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB7"+
		"\x3\x2\x2\x2\xB7\xB8\aJ\x2\x2\xB8\xBA\x3\x2\x2\x2\xB9\xB1\x3\x2\x2\x2"+
		"\xBA\xBB\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xBD\x3"+
		"\x2\x2\x2\xBD\xBE\aJ\x2\x2\xBE\a\x3\x2\x2\x2\xBF\xC0\aI\x2\x2\xC0\xC1"+
		"\a\x6\x2\x2\xC1\xC2\t\x2\x2\x2\xC2\xC5\x5\f\a\x2\xC3\xC6\x5\x10\t\x2\xC4"+
		"\xC6\x5\b\x5\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2"+
		"\x2\x2\xC7\xC8\x3\x2\x2\x2\xC7\xC5\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9"+
		"\xCA\aJ\x2\x2\xCA\t\x3\x2\x2\x2\xCB\xCC\aI\x2\x2\xCC\xCD\a\t\x2\x2\xCD"+
		"\xCE\t\x3\x2\x2\xCE\xCF\x5\x92J\x2\xCF\xD0\aJ\x2\x2\xD0\v\x3\x2\x2\x2"+
		"\xD1\xD2\aI\x2\x2\xD2\xD3\a\f\x2\x2\xD3\xD4\x5x=\x2\xD4\xD5\aJ\x2\x2\xD5"+
		"\r\x3\x2\x2\x2\xD6\xE5\aI\x2\x2\xD7\xE6\x5,\x17\x2\xD8\xE6\x5\x1E\x10"+
		"\x2\xD9\xE6\x5 \x11\x2\xDA\xE6\x5\x32\x1A\x2\xDB\xE6\x5\x34\x1B\x2\xDC"+
		"\xE6\x5:\x1E\x2\xDD\xE6\x5<\x1F\x2\xDE\xE6\x5\x36\x1C\x2\xDF\xE6\x5\x38"+
		"\x1D\x2\xE0\xE6\x5> \x2\xE1\xE6\x5\x42\"\x2\xE2\xE6\x5@!\x2\xE3\xE6\x5"+
		"\x44#\x2\xE4\xE6\x5\x46$\x2\xE5\xD7\x3\x2\x2\x2\xE5\xD8\x3\x2\x2\x2\xE5"+
		"\xD9\x3\x2\x2\x2\xE5\xDA\x3\x2\x2\x2\xE5\xDB\x3\x2\x2\x2\xE5\xDC\x3\x2"+
		"\x2\x2\xE5\xDD\x3\x2\x2\x2\xE5\xDE\x3\x2\x2\x2\xE5\xDF\x3\x2\x2\x2\xE5"+
		"\xE0\x3\x2\x2\x2\xE5\xE1\x3\x2\x2\x2\xE5\xE2\x3\x2\x2\x2\xE5\xE3\x3\x2"+
		"\x2\x2\xE5\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xE8\aJ\x2\x2\xE8\xEB"+
		"\x3\x2\x2\x2\xE9\xEB\x5\x16\f\x2\xEA\xD6\x3\x2\x2\x2\xEA\xE9\x3\x2\x2"+
		"\x2\xEB\xF\x3\x2\x2\x2\xEC\xED\aI\x2\x2\xED\xEE\a\r\x2\x2\xEE\xF0\aI\x2"+
		"\x2\xEF\xF1\x5\x14\v\x2\xF0\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF3"+
		"\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4\xF5\aJ\x2\x2"+
		"\xF5\xF6\aJ\x2\x2\xF6\x105\x3\x2\x2\x2\xF7\xF8\aI\x2\x2\xF8\xF9\a\xE\x2"+
		"\x2\xF9\xFB\aI\x2\x2\xFA\xFC\x5\x14\v\x2\xFB\xFA\x3\x2\x2\x2\xFC\xFD\x3"+
		"\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFE\xFF\x3\x2\x2\x2"+
		"\xFF\x100\aJ\x2\x2\x100\x101\aJ\x2\x2\x101\x105\x3\x2\x2\x2\x102\x105"+
		"\x5\x16\f\x2\x103\x105\x5\x18\r\x2\x104\xEC\x3\x2\x2\x2\x104\xF7\x3\x2"+
		"\x2\x2\x104\x102\x3\x2\x2\x2\x104\x103\x3\x2\x2\x2\x105\x11\x3\x2\x2\x2"+
		"\x106\x107\aI\x2\x2\x107\x108\a\xE\x2\x2\x108\x10A\aI\x2\x2\x109\x10B"+
		"\x5\x14\v\x2\x10A\x109\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10D\x3"+
		"\x2\x2\x2\x10C\x10A\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x10F\aJ\x2"+
		"\x2\x10F\x110\aJ\x2\x2\x110\x114\x3\x2\x2\x2\x111\x114\x5\x16\f\x2\x112"+
		"\x114\x5\x18\r\x2\x113\x106\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x112"+
		"\x3\x2\x2\x2\x114\x13\x3\x2\x2\x2\x115\x116\aI\x2\x2\x116\x117\x5x=\x2"+
		"\x117\x118\x5\x12\n\x2\x118\x119\aJ\x2\x2\x119\x122\x3\x2\x2\x2\x11A\x122"+
		"\x5\x12\n\x2\x11B\x11C\aI\x2\x2\x11C\x11D\x5x=\x2\x11D\x11E\x5\xE\b\x2"+
		"\x11E\x11F\aJ\x2\x2\x11F\x122\x3\x2\x2\x2\x120\x122\x5\xE\b\x2\x121\x115"+
		"\x3\x2\x2\x2\x121\x11A\x3\x2\x2\x2\x121\x11B\x3\x2\x2\x2\x121\x120\x3"+
		"\x2\x2\x2\x122\x15\x3\x2\x2\x2\x123\x124\aI\x2\x2\x124\x125\t\x4\x2\x2"+
		"\x125\x126\x5j\x36\x2\x126\x12B\x5\x2\x2\x2\x127\x12C\x5\x14\v\x2\x128"+
		"\x12C\x5x=\x2\x129\x12C\x5N(\x2\x12A\x12C\x5L\'\x2\x12B\x127\x3\x2\x2"+
		"\x2\x12B\x128\x3\x2\x2\x2\x12B\x129\x3\x2\x2\x2\x12B\x12A\x3\x2\x2\x2"+
		"\x12C\x12D\x3\x2\x2\x2\x12D\x12E\aJ\x2\x2\x12E\x17\x3\x2\x2\x2\x12F\x130"+
		"\aI\x2\x2\x130\x131\a\x11\x2\x2\x131\x132\x5h\x35\x2\x132\x136\x5\x2\x2"+
		"\x2\x133\x137\x5\x10\t\x2\x134\x137\x5\xE\b\x2\x135\x137\x5\x14\v\x2\x136"+
		"\x133\x3\x2\x2\x2\x136\x134\x3\x2\x2\x2\x136\x135\x3\x2\x2\x2\x137\x138"+
		"\x3\x2\x2\x2\x138\x139\aJ\x2\x2\x139\x19\x3\x2\x2\x2\x13A\x13B\aI\x2\x2"+
		"\x13B\x13C\a\x12\x2\x2\x13C\x13D\x5h\x35\x2\x13D\x13E\x5\x2\x2\x2\x13E"+
		"\x13F\aJ\x2\x2\x13F\x1B\x3\x2\x2\x2\x140\x141\aI\x2\x2\x141\x142\a\x13"+
		"\x2\x2\x142\x145\a\x14\x2\x2\x143\x146\x5\x2\x2\x2\x144\x146\x5\x92J\x2"+
		"\x145\x143\x3\x2\x2\x2\x145\x144\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147"+
		"\x148\aJ\x2\x2\x148\x1D\x3\x2\x2\x2\x149\x14A\a\x13\x2\x2\x14A\x14C\a"+
		"\x15\x2\x2\x14B\x14D\x5(\x15\x2\x14C\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2"+
		"\x2\x2\x14E\x14F\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14F\x1F\x3\x2\x2\x2"+
		"\x150\x151\a\x13\x2\x2\x151\x152\a\x16\x2\x2\x152\x153\x5N(\x2\x153\x154"+
		"\x5&\x14\x2\x154!\x3\x2\x2\x2\x155\x156\a\x13\x2\x2\x156\x158\a\x17\x2"+
		"\x2\x157\x159\x5$\x13\x2\x158\x157\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2\x15A"+
		"\x158\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B#\x3\x2\x2\x2\x15C\x15D\a"+
		"I\x2\x2\x15D\x15E\x5\x92J\x2\x15E\x15F\aJ\x2\x2\x15F%\x3\x2\x2\x2\x160"+
		"\x161\aI\x2\x2\x161\x163\a\x16\x2\x2\x162\x164\x5*\x16\x2\x163\x162\x3"+
		"\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x166\x3\x2\x2\x2\x165\x163\x3\x2"+
		"\x2\x2\x166\x167\x3\x2\x2\x2\x167\x168\aJ\x2\x2\x168\'\x3\x2\x2\x2\x169"+
		"\x16E\aI\x2\x2\x16A\x16B\aG\x2\x2\x16B\x16D\a\x18\x2\x2\x16C\x16A\x3\x2"+
		"\x2\x2\x16D\x170\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16E\x16C\x3\x2\x2"+
		"\x2\x16F\x171\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x175\aG\x2\x2\x172"+
		"\x174\x5(\x15\x2\x173\x172\x3\x2\x2\x2\x174\x177\x3\x2\x2\x2\x175\x176"+
		"\x3\x2\x2\x2\x175\x173\x3\x2\x2\x2\x176\x178\x3\x2\x2\x2\x177\x175\x3"+
		"\x2\x2\x2\x178\x179\aJ\x2\x2\x179)\x3\x2\x2\x2\x17A\x17B\aI\x2\x2\x17B"+
		"\x17C\x5\x2\x2\x2\x17C\x17D\aJ\x2\x2\x17D\x191\x3\x2\x2\x2\x17E\x184\a"+
		"I\x2\x2\x17F\x180\x5\x94K\x2\x180\x181\a\x18\x2\x2\x181\x183\x3\x2\x2"+
		"\x2\x182\x17F\x3\x2\x2\x2\x183\x186\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2"+
		"\x184\x182\x3\x2\x2\x2\x185\x187\x3\x2\x2\x2\x186\x184\x3\x2\x2\x2\x187"+
		"\x18B\x5\x94K\x2\x188\x18A\x5*\x16\x2\x189\x188\x3\x2\x2\x2\x18A\x18D"+
		"\x3\x2\x2\x2\x18B\x18C\x3\x2\x2\x2\x18B\x189\x3\x2\x2\x2\x18C\x18E\x3"+
		"\x2\x2\x2\x18D\x18B\x3\x2\x2\x2\x18E\x18F\aJ\x2\x2\x18F\x191\x3\x2\x2"+
		"\x2\x190\x17A\x3\x2\x2\x2\x190\x17E\x3\x2\x2\x2\x191+\x3\x2\x2\x2\x192"+
		"\x193\a\x19\x2\x2\x193\x194\a\x1A\x2\x2\x194\x195\x5\x2\x2\x2\x195\x197"+
		"\aI\x2\x2\x196\x198\x5.\x18\x2\x197\x196\x3\x2\x2\x2\x198\x199\x3\x2\x2"+
		"\x2\x199\x19A\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2\x19A\x19B\x3\x2\x2\x2"+
		"\x19B\x19C\aJ\x2\x2\x19C-\x3\x2\x2\x2\x19D\x19F\aI\x2\x2\x19E\x1A0\x5"+
		"\x30\x19\x2\x19F\x19E\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\x3\x2"+
		"\x2\x2\x1A1\x19F\x3\x2\x2\x2\x1A2\x1A3\x3\x2\x2\x2\x1A3\x1A4\x5\x92J\x2"+
		"\x1A4\x1A5\aJ\x2\x2\x1A5/\x3\x2\x2\x2\x1A6\x1A7\aI\x2\x2\x1A7\x1AD\x5"+
		"\x94K\x2\x1A8\x1A9\aI\x2\x2\x1A9\x1AA\x5\x94K\x2\x1AA\x1AB\aJ\x2\x2\x1AB"+
		"\x1AE\x3\x2\x2\x2\x1AC\x1AE\x5v<\x2\x1AD\x1A8\x3\x2\x2\x2\x1AD\x1AC\x3"+
		"\x2\x2\x2\x1AE\x1AF\x3\x2\x2\x2\x1AF\x1B0\aJ\x2\x2\x1B0\x31\x3\x2\x2\x2"+
		"\x1B1\x1B2\a\x1B\x2\x2\x1B2\x1B7\t\x5\x2\x2\x1B3\x1B8\x5\x62\x32\x2\x1B4"+
		"\x1B8\a\x1D\x2\x2\x1B5\x1B8\a\x1C\x2\x2\x1B6\x1B8\a\x1E\x2\x2\x1B7\x1B3"+
		"\x3\x2\x2\x2\x1B7\x1B4\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B7\x1B6\x3"+
		"\x2\x2\x2\x1B8\x33\x3\x2\x2\x2\x1B9\x1BA\a\x1F\x2\x2\x1BA\x1BB\x5L\'\x2"+
		"\x1BB\x1BC\x5\x92J\x2\x1BC\x35\x3\x2\x2\x2\x1BD\x1BE\a \x2\x2\x1BE\x1BF"+
		"\x5L\'\x2\x1BF\x1C0\x5\x92J\x2\x1C0\x37\x3\x2\x2\x2\x1C1\x1C2\a!\x2\x2"+
		"\x1C2\x1C3\x5L\'\x2\x1C3\x1C4\x5\x92J\x2\x1C4\x39\x3\x2\x2\x2\x1C5\x1C6"+
		"\a\"\x2\x2\x1C6\x1C7\x5H%\x2\x1C7\x1C8\x5H%\x2\x1C8;\x3\x2\x2\x2\x1C9"+
		"\x1CA\a#\x2\x2\x1CA\x1CB\x5H%\x2\x1CB\x1CC\x5H%\x2\x1CC=\x3\x2\x2\x2\x1CD"+
		"\x1CE\a$\x2\x2\x1CE\x1CF\x5H%\x2\x1CF?\x3\x2\x2\x2\x1D0\x1D1\a%\x2\x2"+
		"\x1D1\x1D2\x5N(\x2\x1D2\x41\x3\x2\x2\x2\x1D3\x1D4\a&\x2\x2\x1D4\x1D5\a"+
		"\'\x2\x2\x1D5\x43\x3\x2\x2\x2\x1D6\x1D7\a(\x2\x2\x1D7\x1D8\x5\x92J\x2"+
		"\x1D8\x1D9\x5\xE\b\x2\x1D9\x1E1\x3\x2\x2\x2\x1DA\x1DB\a(\x2\x2\x1DB\x1DC"+
		"\a\x10\x2\x2\x1DC\x1DD\aI\x2\x2\x1DD\x1DE\x5:\x1E\x2\x1DE\x1DF\aJ\x2\x2"+
		"\x1DF\x1E1\x3\x2\x2\x2\x1E0\x1D6\x3\x2\x2\x2\x1E0\x1DA\x3\x2\x2\x2\x1E1"+
		"\x45\x3\x2\x2\x2\x1E2\x1E3\a)\x2\x2\x1E3G\x3\x2\x2\x2\x1E4\x1F2\x5\x2"+
		"\x2\x2\x1E5\x1F2\x5\x88\x45\x2\x1E6\x1F2\x5\x8A\x46\x2\x1E7\x1F2\x5J&"+
		"\x2\x1E8\x1EC\aI\x2\x2\x1E9\x1ED\a*\x2\x2\x1EA\x1ED\a+\x2\x2\x1EB\x1ED"+
		"\x5\x92J\x2\x1EC\x1E9\x3\x2\x2\x2\x1EC\x1EA\x3\x2\x2\x2\x1EC\x1EB\x3\x2"+
		"\x2\x2\x1ED\x1EE\x3\x2\x2\x2\x1EE\x1EF\x5N(\x2\x1EF\x1F0\aJ\x2\x2\x1F0"+
		"\x1F2\x3\x2\x2\x2\x1F1\x1E4\x3\x2\x2\x2\x1F1\x1E5\x3\x2\x2\x2\x1F1\x1E6"+
		"\x3\x2\x2\x2\x1F1\x1E7\x3\x2\x2\x2\x1F1\x1E8\x3\x2\x2\x2\x1F2I\x3\x2\x2"+
		"\x2\x1F3\x1F4\aI\x2\x2\x1F4\x1F5\a,\x2\x2\x1F5\x1F6\x5H%\x2\x1F6\x1F7"+
		"\aJ\x2\x2\x1F7K\x3\x2\x2\x2\x1F8\x1FC\aI\x2\x2\x1F9\x1FD\x5\x2\x2\x2\x1FA"+
		"\x1FD\a\x4\x2\x2\x1FB\x1FD\x5Z.\x2\x1FC\x1F9\x3\x2\x2\x2\x1FC\x1FA\x3"+
		"\x2\x2\x2\x1FC\x1FB\x3\x2\x2\x2\x1FD\x1FE\x3\x2\x2\x2\x1FE\x201\a-\x2"+
		"\x2\x1FF\x202\x5\x94K\x2\x200\x202\x5\x2\x2\x2\x201\x1FF\x3\x2\x2\x2\x201"+
		"\x200\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x204\aJ\x2\x2\x204M\x3\x2"+
		"\x2\x2\x205\x213\x5\x2\x2\x2\x206\x213\x5\x8CG\x2\x207\x213\x5r:\x2\x208"+
		"\x209\aI\x2\x2\x209\x20A\x5V,\x2\x20A\x20D\x5X-\x2\x20B\x20E\x5\x94K\x2"+
		"\x20C\x20E\x5\x2\x2\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20C\x3\x2\x2\x2\x20E"+
		"\x20F\x3\x2\x2\x2\x20F\x210\aJ\x2\x2\x210\x213\x3\x2\x2\x2\x211\x213\x5"+
		"P)\x2\x212\x205\x3\x2\x2\x2\x212\x206\x3\x2\x2\x2\x212\x207\x3\x2\x2\x2"+
		"\x212\x208\x3\x2\x2\x2\x212\x211\x3\x2\x2\x2\x213O\x3\x2\x2\x2\x214\x218"+
		"\aI\x2\x2\x215\x219\a*\x2\x2\x216\x219\a+\x2\x2\x217\x219\x5\x92J\x2\x218"+
		"\x215\x3\x2\x2\x2\x218\x216\x3\x2\x2\x2\x218\x217\x3\x2\x2\x2\x219\x21A"+
		"\x3\x2\x2\x2\x21A\x21B\x5R*\x2\x21B\x21C\aJ\x2\x2\x21CQ\x3\x2\x2\x2\x21D"+
		"\x21E\x5T+\x2\x21ES\x3\x2\x2\x2\x21F\x220\aI\x2\x2\x220\x221\a.\x2\x2"+
		"\x221\x222\x5\x92J\x2\x222\x223\x5N(\x2\x223\x224\a/\x2\x2\x224\x225\x5"+
		"\x2\x2\x2\x225\x226\aJ\x2\x2\x226U\x3\x2\x2\x2\x227\x22B\x5\x2\x2\x2\x228"+
		"\x22B\a\x4\x2\x2\x229\x22B\x5\\/\x2\x22A\x227\x3\x2\x2\x2\x22A\x228\x3"+
		"\x2\x2\x2\x22A\x229\x3\x2\x2\x2\x22BW\x3\x2\x2\x2\x22C\x22D\t\x6\x2\x2"+
		"\x22DY\x3\x2\x2\x2\x22E\x231\x5^\x30\x2\x22F\x231\x5\\/\x2\x230\x22E\x3"+
		"\x2\x2\x2\x230\x22F\x3\x2\x2\x2\x231[\x3\x2\x2\x2\x232\x233\aI\x2\x2\x233"+
		"\x234\x5`\x31\x2\x234\x235\a\a\x2\x2\x235\x236\aJ\x2\x2\x236\x239\x3\x2"+
		"\x2\x2\x237\x239\x5\x62\x32\x2\x238\x232\x3\x2\x2\x2\x238\x237\x3\x2\x2"+
		"\x2\x239]\x3\x2\x2\x2\x23A\x23B\aI\x2\x2\x23B\x23C\x5`\x31\x2\x23C\x23D"+
		"\a\b\x2\x2\x23D\x23E\aJ\x2\x2\x23E\x241\x3\x2\x2\x2\x23F\x241\x5\x64\x33"+
		"\x2\x240\x23A\x3\x2\x2\x2\x240\x23F\x3\x2\x2\x2\x241_\x3\x2\x2\x2\x242"+
		"\x247\x5\x92J\x2\x243\x247\a\x1E\x2\x2\x244\x247\a\x1C\x2\x2\x245\x247"+
		"\a\x1D\x2\x2\x246\x242\x3\x2\x2\x2\x246\x243\x3\x2\x2\x2\x246\x244\x3"+
		"\x2\x2\x2\x246\x245\x3\x2\x2\x2\x247\x61\x3\x2\x2\x2\x248\x249\aI\x2\x2"+
		"\x249\x24A\a\x34\x2\x2\x24A\x24B\x5H%\x2\x24B\x24C\aJ\x2\x2\x24C\x63\x3"+
		"\x2\x2\x2\x24D\x24E\aI\x2\x2\x24E\x24F\a\b\x2\x2\x24F\x250\x5\\/\x2\x250"+
		"\x251\aJ\x2\x2\x251\x65\x3\x2\x2\x2\x252\x253\aI\x2\x2\x253\x254\a\x35"+
		"\x2\x2\x254\x255\t\x2\x2\x2\x255\x256\aJ\x2\x2\x256g\x3\x2\x2\x2\x257"+
		"\x25D\x5\x2\x2\x2\x258\x25D\x5\x92J\x2\x259\x25D\x5x=\x2\x25A\x25D\x5"+
		"\x94K\x2\x25B\x25D\x5j\x36\x2\x25C\x257\x3\x2\x2\x2\x25C\x258\x3\x2\x2"+
		"\x2\x25C\x259\x3\x2\x2\x2\x25C\x25A\x3\x2\x2\x2\x25C\x25B\x3\x2\x2\x2"+
		"\x25Di\x3\x2\x2\x2\x25E\x269\x5\x2\x2\x2\x25F\x269\x5N(\x2\x260\x269\x5"+
		"l\x37\x2\x261\x269\x5n\x38\x2\x262\x269\a\a\x2\x2\x263\x269\a\b\x2\x2"+
		"\x264\x269\x5^\x30\x2\x265\x269\x5\x66\x34\x2\x266\x269\x5p\x39\x2\x267"+
		"\x269\x5r:\x2\x268\x25E\x3\x2\x2\x2\x268\x25F\x3\x2\x2\x2\x268\x260\x3"+
		"\x2\x2\x2\x268\x261\x3\x2\x2\x2\x268\x262\x3\x2\x2\x2\x268\x263\x3\x2"+
		"\x2\x2\x268\x264\x3\x2\x2\x2\x268\x265\x3\x2\x2\x2\x268\x266\x3\x2\x2"+
		"\x2\x268\x267\x3\x2\x2\x2\x269k\x3\x2\x2\x2\x26A\x270\aI\x2\x2\x26B\x26C"+
		"\x5\x94K\x2\x26C\x26D\a\x18\x2\x2\x26D\x26F\x3\x2\x2\x2\x26E\x26B\x3\x2"+
		"\x2\x2\x26F\x272\x3\x2\x2\x2\x270\x271\x3\x2\x2\x2\x270\x26E\x3\x2\x2"+
		"\x2\x271\x273\x3\x2\x2\x2\x272\x270\x3\x2\x2\x2\x273\x274\x5\x94K\x2\x274"+
		"\x275\aJ\x2\x2\x275m\x3\x2\x2\x2\x276\x27A\x5R*\x2\x277\x27A\x5\x16\f"+
		"\x2\x278\x27A\x5\x18\r\x2\x279\x276\x3\x2\x2\x2\x279\x277\x3\x2\x2\x2"+
		"\x279\x278\x3\x2\x2\x2\x27Ao\x3\x2\x2\x2\x27B\x27C\aI\x2\x2\x27C\x27D"+
		"\a\x36\x2\x2\x27D\x27E\x5\x92J\x2\x27E\x27F\a\x37\x2\x2\x27F\x280\x5\x92"+
		"J\x2\x280\x281\aJ\x2\x2\x281q\x3\x2\x2\x2\x282\x283\aI\x2\x2\x283\x284"+
		"\a\x38\x2\x2\x284\x285\x5j\x36\x2\x285\x286\x5\x2\x2\x2\x286\x287\x5x"+
		"=\x2\x287\x288\aJ\x2\x2\x288s\x3\x2\x2\x2\x289\x28A\a\x45\x2\x2\x28A\x28B"+
		"\x5v<\x2\x28B\x28C\x5v<\x2\x28Cu\x3\x2\x2\x2\x28D\x299\x5\x2\x2\x2\x28E"+
		"\x299\x5\x94K\x2\x28F\x290\aI\x2\x2\x290\x293\a\x39\x2\x2\x291\x294\x5"+
		"\x2\x2\x2\x292\x294\x5\x94K\x2\x293\x291\x3\x2\x2\x2\x293\x292\x3\x2\x2"+
		"\x2\x294\x295\x3\x2\x2\x2\x295\x296\x5H%\x2\x296\x297\aJ\x2\x2\x297\x299"+
		"\x3\x2\x2\x2\x298\x28D\x3\x2\x2\x2\x298\x28E\x3\x2\x2\x2\x298\x28F\x3"+
		"\x2\x2\x2\x299w\x3\x2\x2\x2\x29A\x2B5\aI\x2\x2\x29B\x29C\a\x43\x2\x2\x29C"+
		"\x29E\x5x=\x2\x29D\x29F\x5x=\x2\x29E\x29D\x3\x2\x2\x2\x29F\x2A0\x3\x2"+
		"\x2\x2\x2A0\x2A1\x3\x2\x2\x2\x2A0\x29E\x3\x2\x2\x2\x2A1\x2B6\x3\x2\x2"+
		"\x2\x2A2\x2A3\x5z>\x2\x2A3\x2A4\x5\x92J\x2\x2A4\x2A5\x5\x92J\x2\x2A5\x2B6"+
		"\x3\x2\x2\x2\x2A6\x2B6\x5t;\x2\x2A7\x2A8\a\x45\x2\x2\x2A8\x2A9\x5H%\x2"+
		"\x2A9\x2AA\x5H%\x2\x2AA\x2B6\x3\x2\x2\x2\x2AB\x2AC\a\x46\x2\x2\x2AC\x2B6"+
		"\x5x=\x2\x2AD\x2AE\a\x45\x2\x2\x2AE\x2AF\x5\\/\x2\x2AF\x2B0\x5\\/\x2\x2B0"+
		"\x2B6\x3\x2\x2\x2\x2B1\x2B2\a\x45\x2\x2\x2B2\x2B3\x5^\x30\x2\x2B3\x2B4"+
		"\x5^\x30\x2\x2B4\x2B6\x3\x2\x2\x2\x2B5\x29B\x3\x2\x2\x2\x2B5\x2A2\x3\x2"+
		"\x2\x2\x2B5\x2A6\x3\x2\x2\x2\x2B5\x2A7\x3\x2\x2\x2\x2B5\x2AB\x3\x2\x2"+
		"\x2\x2B5\x2AD\x3\x2\x2\x2\x2B5\x2B1\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2"+
		"\x2B7\x2B8\aJ\x2\x2\x2B8\x2BB\x3\x2\x2\x2\x2B9\x2BB\x5\x16\f\x2\x2BA\x29A"+
		"\x3\x2\x2\x2\x2BA\x2B9\x3\x2\x2\x2\x2BBy\x3\x2\x2\x2\x2BC\x2BD\t\a\x2"+
		"\x2\x2BD{\x3\x2\x2\x2\x2BE\x2BF\aI\x2\x2\x2BF\x2C0\a:\x2\x2\x2C0\x2C1"+
		"\x5\x92J\x2\x2C1\x2C2\x5\x92J\x2\x2C2\x2C3\aJ\x2\x2\x2C3}\x3\x2\x2\x2"+
		"\x2C4\x2C5\aI\x2\x2\x2C5\x2C6\a;\x2\x2\x2C6\x2C7\x5\x92J\x2\x2C7\x2C8"+
		"\x5\x92J\x2\x2C8\x2C9\aJ\x2\x2\x2C9\x7F\x3\x2\x2\x2\x2CA\x2CB\aI\x2\x2"+
		"\x2CB\x2CC\a<\x2\x2\x2CC\x2CD\x5\x92J\x2\x2CD\x2CE\x5\x92J\x2\x2CE\x2CF"+
		"\aJ\x2\x2\x2CF\x81\x3\x2\x2\x2\x2D0\x2D1\aI\x2\x2\x2D1\x2D2\a=\x2\x2\x2D2"+
		"\x2D3\x5\x92J\x2\x2D3\x2D4\x5\x92J\x2\x2D4\x2D5\aJ\x2\x2\x2D5\x83\x3\x2"+
		"\x2\x2\x2D6\x2D7\aI\x2\x2\x2D7\x2D8\a>\x2\x2\x2D8\x2D9\x5\x92J\x2\x2D9"+
		"\x2DA\x5\x92J\x2\x2DA\x2DB\aJ\x2\x2\x2DB\x85\x3\x2\x2\x2\x2DC\x2DD\aI"+
		"\x2\x2\x2DD\x2E1\a?\x2\x2\x2DE\x2E2\x5\x2\x2\x2\x2DF\x2E2\x5N(\x2\x2E0"+
		"\x2E2\x5R*\x2\x2E1\x2DE\x3\x2\x2\x2\x2E1\x2DF\x3\x2\x2\x2\x2E1\x2E0\x3"+
		"\x2\x2\x2\x2E2\x2E3\x3\x2\x2\x2\x2E3\x2E4\aJ\x2\x2\x2E4\x87\x3\x2\x2\x2"+
		"\x2E5\x2E6\aI\x2\x2\x2E6\x2E7\a\v\x2\x2\x2E7\x2E8\x5N(\x2\x2E8\x2E9\a"+
		"/\x2\x2\x2E9\x2EA\x5\x2\x2\x2\x2EA\x2EB\aJ\x2\x2\x2EB\x89\x3\x2\x2\x2"+
		"\x2EC\x2ED\aI\x2\x2\x2ED\x2EE\a\n\x2\x2\x2EE\x2EF\x5N(\x2\x2EF\x2F0\a"+
		"/\x2\x2\x2F0\x2F1\x5\x2\x2\x2\x2F1\x2F2\aJ\x2\x2\x2F2\x8B\x3\x2\x2\x2"+
		"\x2F3\x2F4\aI\x2\x2\x2F4\x2FB\a@\x2\x2\x2F5\x2FC\x5\x16\f\x2\x2F6\x2F8"+
		"\x5N(\x2\x2F7\x2F6\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x2FA\x3\x2\x2"+
		"\x2\x2F9\x2F7\x3\x2\x2\x2\x2FA\x2FC\x3\x2\x2\x2\x2FB\x2F5\x3\x2\x2\x2"+
		"\x2FB\x2F7\x3\x2\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FE\aJ\x2\x2\x2FE\x8D"+
		"\x3\x2\x2\x2\x2FF\x300\aI\x2\x2\x300\x301\a\x41\x2\x2\x301\x302\x5N(\x2"+
		"\x302\x303\a/\x2\x2\x303\x304\x5\x2\x2\x2\x304\x305\aJ\x2\x2\x305\x8F"+
		"\x3\x2\x2\x2\x306\x307\aI\x2\x2\x307\x308\a\x42\x2\x2\x308\x309\x5H%\x2"+
		"\x309\x30A\a/\x2\x2\x30A\x30B\x5\x2\x2\x2\x30B\x30C\aJ\x2\x2\x30C\x91"+
		"\x3\x2\x2\x2\x30D\x31D\x5\x2\x2\x2\x30E\x31D\x5\x86\x44\x2\x30F\x31D\x5"+
		"~@\x2\x310\x31D\x5\x80\x41\x2\x311\x31D\x5\x82\x42\x2\x312\x31D\x5|?\x2"+
		"\x313\x31D\x5\x84\x43\x2\x314\x31D\x5\x8EH\x2\x315\x31D\x5L\'\x2\x316"+
		"\x31D\x5\x90I\x2\x317\x319\aG\x2\x2\x318\x317\x3\x2\x2\x2\x319\x31A\x3"+
		"\x2\x2\x2\x31A\x318\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2\x31B\x31D\x3\x2"+
		"\x2\x2\x31C\x30D\x3\x2\x2\x2\x31C\x30E\x3\x2\x2\x2\x31C\x30F\x3\x2\x2"+
		"\x2\x31C\x310\x3\x2\x2\x2\x31C\x311\x3\x2\x2\x2\x31C\x312\x3\x2\x2\x2"+
		"\x31C\x313\x3\x2\x2\x2\x31C\x314\x3\x2\x2\x2\x31C\x315\x3\x2\x2\x2\x31C"+
		"\x316\x3\x2\x2\x2\x31C\x318\x3\x2\x2\x2\x31D\x93\x3\x2\x2\x2\x31E\x320"+
		"\aH\x2\x2\x31F\x31E\x3\x2\x2\x2\x320\x321\x3\x2\x2\x2\x321\x31F\x3\x2"+
		"\x2\x2\x321\x322\x3\x2\x2\x2\x322\x95\x3\x2\x2\x2<\x9E\xA4\xA6\xB5\xBB"+
		"\xC5\xC7\xE5\xEA\xF2\xFD\x104\x10C\x113\x121\x12B\x136\x145\x14E\x15A"+
		"\x165\x16E\x175\x184\x18B\x190\x199\x1A1\x1AD\x1B7\x1E0\x1EC\x1F1\x1FC"+
		"\x201\x20D\x212\x218\x22A\x230\x238\x240\x246\x25C\x268\x270\x279\x293"+
		"\x298\x2A0\x2B5\x2BA\x2E1\x2F9\x2FB\x31A\x31C\x321";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
