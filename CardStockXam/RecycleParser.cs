//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Recycle.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class RecycleParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, BOOLOP=68, COMPOP=69, EQOP=70, UNOP=71, INTNUM=72, LETT=73, 
		OPEN=74, CLOSE=75, WS=76, ANY=77;
	public const int
		RULE_var = 0, RULE_game = 1, RULE_setup = 2, RULE_stage = 3, RULE_scoring = 4, 
		RULE_endcondition = 5, RULE_action = 6, RULE_multiaction = 7, RULE_multiaction2 = 8, 
		RULE_condact = 9, RULE_agg = 10, RULE_let = 11, RULE_declare = 12, RULE_playercreate = 13, 
		RULE_teamcreate = 14, RULE_deckcreate = 15, RULE_diecreate = 16, RULE_die = 17, 
		RULE_deck = 18, RULE_teams = 19, RULE_attribute = 20, RULE_initpoints = 21, 
		RULE_awards = 22, RULE_subaward = 23, RULE_cycleaction = 24, RULE_setaction = 25, 
		RULE_incaction = 26, RULE_decaction = 27, RULE_moveaction = 28, RULE_copyaction = 29, 
		RULE_removeaction = 30, RULE_shuffleaction = 31, RULE_turnaction = 32, 
		RULE_repeat = 33, RULE_throwalldice = 34, RULE_saveturnstats = 35, RULE_card = 36, 
		RULE_actual = 37, RULE_rawstorage = 38, RULE_cstorage = 39, RULE_memstorage = 40, 
		RULE_dievalue = 41, RULE_memset = 42, RULE_tuple = 43, RULE_locpre = 44, 
		RULE_locdesc = 45, RULE_who = 46, RULE_whop = 47, RULE_whot = 48, RULE_whodesc = 49, 
		RULE_owner = 50, RULE_teamp = 51, RULE_other = 52, RULE_typed = 53, RULE_collection = 54, 
		RULE_strcollection = 55, RULE_cstoragecollection = 56, RULE_range = 57, 
		RULE_filter = 58, RULE_attrcomp = 59, RULE_cardatt = 60, RULE_boolean = 61, 
		RULE_intop = 62, RULE_add = 63, RULE_mult = 64, RULE_subtract = 65, RULE_mod = 66, 
		RULE_divide = 67, RULE_sizeof = 68, RULE_maxof = 69, RULE_minof = 70, 
		RULE_unionof = 71, RULE_sum = 72, RULE_score = 73, RULE_int = 74, RULE_namegr = 75;
	public static readonly string[] ruleNames = {
		"var", "game", "setup", "stage", "scoring", "endcondition", "action", 
		"multiaction", "multiaction2", "condact", "agg", "let", "declare", "playercreate", 
		"teamcreate", "deckcreate", "diecreate", "die", "deck", "teams", "attribute", 
		"initpoints", "awards", "subaward", "cycleaction", "setaction", "incaction", 
		"decaction", "moveaction", "copyaction", "removeaction", "shuffleaction", 
		"turnaction", "repeat", "throwalldice", "saveturnstats", "card", "actual", 
		"rawstorage", "cstorage", "memstorage", "dievalue", "memset", "tuple", 
		"locpre", "locdesc", "who", "whop", "whot", "whodesc", "owner", "teamp", 
		"other", "typed", "collection", "strcollection", "cstoragecollection", 
		"range", "filter", "attrcomp", "cardatt", "boolean", "intop", "add", "mult", 
		"subtract", "mod", "divide", "sizeof", "maxof", "minof", "unionof", "sum", 
		"score", "int", "namegr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'''", "'game'", "'setup'", "'stage'", "'player'", "'team'", "'scoring'", 
		"'min'", "'max'", "'end'", "'choice'", "'do'", "'any'", "'all'", "'let'", 
		"'declare'", "'create'", "'players'", "'teams'", "'deck'", "'diestorage'", 
		"','", "'put'", "'points'", "'cycle'", "'next'", "'current'", "'previous'", 
		"'set'", "'inc'", "'dec'", "'move'", "'remember'", "'forget'", "'shuffle'", 
		"'turn'", "'pass'", "'repeat'", "'throwalldice'", "'saveturnstats'", "'roundnumber'", 
		"'top'", "'bottom'", "'actual'", "'sto'", "'dievalue'", "'tuples'", "'using'", 
		"'vloc'", "'iloc'", "'hloc'", "'mem'", "'owner'", "'other'", "'range'", 
		"'..'", "'filter'", "'cardatt'", "'+'", "'*'", "'-'", "'%'", "'//'", "'size'", 
		"'union'", "'sum'", "'score'", null, null, null, "'not'", null, null, 
		"'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "BOOLOP", "COMPOP", "EQOP", 
		"UNOP", "INTNUM", "LETT", "OPEN", "CLOSE", "WS", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Recycle.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RecycleParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class VarContext : ParserRuleContext {
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 0, RULE_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__0);
			State = 153; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public SetupContext setup() {
			return GetRuleContext<SetupContext>(0);
		}
		public ScoringContext scoring() {
			return GetRuleContext<ScoringContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext[] declare() {
			return GetRuleContexts<DeclareContext>();
		}
		public DeclareContext declare(int i) {
			return GetRuleContext<DeclareContext>(i);
		}
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public GameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_game; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitGame(this);
		}
	}

	[RuleVersion(0)]
	public GameContext game() {
		GameContext _localctx = new GameContext(Context, State);
		EnterRule(_localctx, 2, RULE_game);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(OPEN);
			State = 156; Match(T__1);
			State = 160;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 157; declare();
					}
					} 
				}
				State = 162;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 163; setup();
			State = 166;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 166;
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						State = 164; multiaction();
						}
						break;
					case 2:
						{
						State = 165; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 168;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 170; scoring();
			State = 171; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetupContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public PlayercreateContext playercreate() {
			return GetRuleContext<PlayercreateContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public DeckcreateContext[] deckcreate() {
			return GetRuleContexts<DeckcreateContext>();
		}
		public DeckcreateContext deckcreate(int i) {
			return GetRuleContext<DeckcreateContext>(i);
		}
		public RepeatContext[] repeat() {
			return GetRuleContexts<RepeatContext>();
		}
		public RepeatContext repeat(int i) {
			return GetRuleContext<RepeatContext>(i);
		}
		public DiecreateContext[] diecreate() {
			return GetRuleContexts<DiecreateContext>();
		}
		public DiecreateContext diecreate(int i) {
			return GetRuleContext<DiecreateContext>(i);
		}
		public SetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetup(this);
		}
	}

	[RuleVersion(0)]
	public SetupContext setup() {
		SetupContext _localctx = new SetupContext(Context, State);
		EnterRule(_localctx, 4, RULE_setup);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(OPEN);
			State = 174; Match(T__2);
			State = 175; playercreate();
			State = 176; Match(OPEN);
			State = 177; teamcreate();
			State = 178; Match(CLOSE);
			State = 187;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 179; Match(OPEN);
					State = 183;
					switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
					case 1:
						{
						State = 180; deckcreate();
						}
						break;
					case 2:
						{
						State = 181; repeat();
						}
						break;
					case 3:
						{
						State = 182; diecreate();
						}
						break;
					}
					State = 185; Match(CLOSE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 189;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 191; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public EndconditionContext endcondition() {
			return GetRuleContext<EndconditionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext[] multiaction() {
			return GetRuleContexts<MultiactionContext>();
		}
		public MultiactionContext multiaction(int i) {
			return GetRuleContext<MultiactionContext>(i);
		}
		public StageContext[] stage() {
			return GetRuleContexts<StageContext>();
		}
		public StageContext stage(int i) {
			return GetRuleContext<StageContext>(i);
		}
		public StageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStage(this);
		}
	}

	[RuleVersion(0)]
	public StageContext stage() {
		StageContext _localctx = new StageContext(Context, State);
		EnterRule(_localctx, 6, RULE_stage);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(OPEN);
			State = 194; Match(T__3);
			State = 195;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 196; endcondition();
			State = 199;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					State = 199;
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						State = 197; multiaction();
						}
						break;
					case 2:
						{
						State = 198; stage();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 201;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 203; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoringContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scoring; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScoring(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScoring(this);
		}
	}

	[RuleVersion(0)]
	public ScoringContext scoring() {
		ScoringContext _localctx = new ScoringContext(Context, State);
		EnterRule(_localctx, 8, RULE_scoring);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(OPEN);
			State = 206; Match(T__6);
			State = 207;
			_la = TokenStream.La(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 208; @int();
			State = 209; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndconditionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public EndconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endcondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterEndcondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitEndcondition(this);
		}
	}

	[RuleVersion(0)]
	public EndconditionContext endcondition() {
		EndconditionContext _localctx = new EndconditionContext(Context, State);
		EnterRule(_localctx, 10, RULE_endcondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211; Match(OPEN);
			State = 212; Match(T__9);
			State = 213; boolean();
			State = 214; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public InitpointsContext initpoints() {
			return GetRuleContext<InitpointsContext>(0);
		}
		public TeamcreateContext teamcreate() {
			return GetRuleContext<TeamcreateContext>(0);
		}
		public DeckcreateContext deckcreate() {
			return GetRuleContext<DeckcreateContext>(0);
		}
		public CycleactionContext cycleaction() {
			return GetRuleContext<CycleactionContext>(0);
		}
		public SetactionContext setaction() {
			return GetRuleContext<SetactionContext>(0);
		}
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public CopyactionContext copyaction() {
			return GetRuleContext<CopyactionContext>(0);
		}
		public IncactionContext incaction() {
			return GetRuleContext<IncactionContext>(0);
		}
		public DecactionContext decaction() {
			return GetRuleContext<DecactionContext>(0);
		}
		public RemoveactionContext removeaction() {
			return GetRuleContext<RemoveactionContext>(0);
		}
		public TurnactionContext turnaction() {
			return GetRuleContext<TurnactionContext>(0);
		}
		public ShuffleactionContext shuffleaction() {
			return GetRuleContext<ShuffleactionContext>(0);
		}
		public RepeatContext repeat() {
			return GetRuleContext<RepeatContext>(0);
		}
		public ThrowalldiceContext throwalldice() {
			return GetRuleContext<ThrowalldiceContext>(0);
		}
		public SaveturnstatsContext saveturnstats() {
			return GetRuleContext<SaveturnstatsContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(Context, State);
		EnterRule(_localctx, 12, RULE_action);
		try {
			State = 237;
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; Match(OPEN);
				State = 232;
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 217; initpoints();
					}
					break;
				case 2:
					{
					State = 218; teamcreate();
					}
					break;
				case 3:
					{
					State = 219; deckcreate();
					}
					break;
				case 4:
					{
					State = 220; cycleaction();
					}
					break;
				case 5:
					{
					State = 221; setaction();
					}
					break;
				case 6:
					{
					State = 222; moveaction();
					}
					break;
				case 7:
					{
					State = 223; copyaction();
					}
					break;
				case 8:
					{
					State = 224; incaction();
					}
					break;
				case 9:
					{
					State = 225; decaction();
					}
					break;
				case 10:
					{
					State = 226; removeaction();
					}
					break;
				case 11:
					{
					State = 227; turnaction();
					}
					break;
				case 12:
					{
					State = 228; shuffleaction();
					}
					break;
				case 13:
					{
					State = 229; repeat();
					}
					break;
				case 14:
					{
					State = 230; throwalldice();
					}
					break;
				case 15:
					{
					State = 231; saveturnstats();
					}
					break;
				}
				State = 234; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiactionContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public MultiactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction(this);
		}
	}

	[RuleVersion(0)]
	public MultiactionContext multiaction() {
		MultiactionContext _localctx = new MultiactionContext(Context, State);
		EnterRule(_localctx, 14, RULE_multiaction);
		try {
			int _alt;
			State = 263;
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 239; Match(OPEN);
				State = 240; Match(T__10);
				State = 241; Match(OPEN);
				State = 243;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 242; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 245;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 247; Match(CLOSE);
				State = 248; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(OPEN);
				State = 251; Match(T__11);
				State = 252; Match(OPEN);
				State = 254;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 253; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 256;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 258; Match(CLOSE);
				State = 259; Match(CLOSE);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 261; agg();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 262; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiaction2Context : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CondactContext[] condact() {
			return GetRuleContexts<CondactContext>();
		}
		public CondactContext condact(int i) {
			return GetRuleContext<CondactContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public Multiaction2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiaction2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMultiaction2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMultiaction2(this);
		}
	}

	[RuleVersion(0)]
	public Multiaction2Context multiaction2() {
		Multiaction2Context _localctx = new Multiaction2Context(Context, State);
		EnterRule(_localctx, 16, RULE_multiaction2);
		try {
			int _alt;
			State = 278;
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; Match(OPEN);
				State = 266; Match(T__11);
				State = 267; Match(OPEN);
				State = 269;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 268; condact();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 271;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 273; Match(CLOSE);
				State = 274; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondactContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public Multiaction2Context multiaction2() {
			return GetRuleContext<Multiaction2Context>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condact; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCondact(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCondact(this);
		}
	}

	[RuleVersion(0)]
	public CondactContext condact() {
		CondactContext _localctx = new CondactContext(Context, State);
		EnterRule(_localctx, 18, RULE_condact);
		try {
			State = 292;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280; Match(OPEN);
				State = 281; boolean();
				State = 282; multiaction2();
				State = 283; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 285; multiaction2();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 286; Match(OPEN);
				State = 287; boolean();
				State = 288; action();
				State = 289; Match(CLOSE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 291; action();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public AggContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_agg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAgg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAgg(this);
		}
	}

	[RuleVersion(0)]
	public AggContext agg() {
		AggContext _localctx = new AggContext(Context, State);
		EnterRule(_localctx, 20, RULE_agg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294; Match(OPEN);
			State = 295;
			_la = TokenStream.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 296; collection();
			State = 297; var();
			State = 302;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 298; condact();
				}
				break;
			case 2:
				{
				State = 299; boolean();
				}
				break;
			case 3:
				{
				State = 300; cstorage();
				}
				break;
			case 4:
				{
				State = 301; rawstorage();
				}
				break;
			}
			State = 304; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultiactionContext multiaction() {
			return GetRuleContext<MultiactionContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public CondactContext condact() {
			return GetRuleContext<CondactContext>(0);
		}
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 22, RULE_let);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306; Match(OPEN);
			State = 307; Match(T__14);
			State = 308; typed();
			State = 309; var();
			State = 313;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 310; multiaction();
				}
				break;
			case 2:
				{
				State = 311; action();
				}
				break;
			case 3:
				{
				State = 312; condact();
				}
				break;
			}
			State = 315; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public TypedContext typed() {
			return GetRuleContext<TypedContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeclare(this);
		}
	}

	[RuleVersion(0)]
	public DeclareContext declare() {
		DeclareContext _localctx = new DeclareContext(Context, State);
		EnterRule(_localctx, 24, RULE_declare);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317; Match(OPEN);
			State = 318; Match(T__15);
			State = 319; typed();
			State = 320; var();
			State = 321; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlayercreateContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public PlayercreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_playercreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterPlayercreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitPlayercreate(this);
		}
	}

	[RuleVersion(0)]
	public PlayercreateContext playercreate() {
		PlayercreateContext _localctx = new PlayercreateContext(Context, State);
		EnterRule(_localctx, 26, RULE_playercreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323; Match(OPEN);
			State = 324; Match(T__16);
			State = 325; Match(T__17);
			State = 328;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 326; var();
				}
				break;
			case 2:
				{
				State = 327; @int();
				}
				break;
			}
			State = 330; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamcreateContext : ParserRuleContext {
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamcreate(this);
		}
	}

	[RuleVersion(0)]
	public TeamcreateContext teamcreate() {
		TeamcreateContext _localctx = new TeamcreateContext(Context, State);
		EnterRule(_localctx, 28, RULE_teamcreate);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(T__16);
			State = 333; Match(T__18);
			State = 335;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 334; teams();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckcreateContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public DeckContext deck() {
			return GetRuleContext<DeckContext>(0);
		}
		public DeckcreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deckcreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeckcreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeckcreate(this);
		}
	}

	[RuleVersion(0)]
	public DeckcreateContext deckcreate() {
		DeckcreateContext _localctx = new DeckcreateContext(Context, State);
		EnterRule(_localctx, 30, RULE_deckcreate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(T__16);
			State = 340; Match(T__19);
			State = 341; cstorage();
			State = 342; deck();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiecreateContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public DieContext[] die() {
			return GetRuleContexts<DieContext>();
		}
		public DieContext die(int i) {
			return GetRuleContext<DieContext>(i);
		}
		public DiecreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_diecreate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDiecreate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDiecreate(this);
		}
	}

	[RuleVersion(0)]
	public DiecreateContext diecreate() {
		DiecreateContext _localctx = new DiecreateContext(Context, State);
		EnterRule(_localctx, 32, RULE_diecreate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344; Match(T__16);
			State = 345; Match(T__20);
			State = 346; var();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 347; die();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==OPEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DieContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DieContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_die; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDie(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDie(this);
		}
	}

	[RuleVersion(0)]
	public DieContext die() {
		DieContext _localctx = new DieContext(Context, State);
		EnterRule(_localctx, 34, RULE_die);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352; Match(OPEN);
			State = 353; @int();
			State = 354; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeckContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public DeckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deck; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDeck(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDeck(this);
		}
	}

	[RuleVersion(0)]
	public DeckContext deck() {
		DeckContext _localctx = new DeckContext(Context, State);
		EnterRule(_localctx, 36, RULE_deck);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(OPEN);
			State = 357; Match(T__19);
			State = 359;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 358; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 361;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 363; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeamsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeamsContext[] teams() {
			return GetRuleContexts<TeamsContext>();
		}
		public TeamsContext teams(int i) {
			return GetRuleContext<TeamsContext>(i);
		}
		public TeamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeams(this);
		}
	}

	[RuleVersion(0)]
	public TeamsContext teams() {
		TeamsContext _localctx = new TeamsContext(Context, State);
		EnterRule(_localctx, 38, RULE_teams);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; Match(OPEN);
			State = 370;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 366; Match(INTNUM);
					State = 367; Match(T__21);
					}
					} 
				}
				State = 372;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 373; Match(INTNUM);
			State = 377;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 374; teams();
					}
					} 
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			State = 380; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 40, RULE_attribute);
		try {
			int _alt;
			State = 404;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382; Match(OPEN);
				State = 383; var();
				State = 384; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 386; Match(OPEN);
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 387; namegr();
						State = 388; Match(T__21);
						}
						} 
					}
					State = 394;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 395; namegr();
				State = 399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 396; attribute();
						}
						} 
					}
					State = 401;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 402; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitpointsContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AwardsContext[] awards() {
			return GetRuleContexts<AwardsContext>();
		}
		public AwardsContext awards(int i) {
			return GetRuleContext<AwardsContext>(i);
		}
		public InitpointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initpoints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInitpoints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInitpoints(this);
		}
	}

	[RuleVersion(0)]
	public InitpointsContext initpoints() {
		InitpointsContext _localctx = new InitpointsContext(Context, State);
		EnterRule(_localctx, 42, RULE_initpoints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(T__22);
			State = 407; Match(T__23);
			State = 408; var();
			State = 409; Match(OPEN);
			State = 411;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 410; awards();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 413;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 415; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AwardsContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubawardContext[] subaward() {
			return GetRuleContexts<SubawardContext>();
		}
		public SubawardContext subaward(int i) {
			return GetRuleContext<SubawardContext>(i);
		}
		public AwardsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_awards; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAwards(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAwards(this);
		}
	}

	[RuleVersion(0)]
	public AwardsContext awards() {
		AwardsContext _localctx = new AwardsContext(Context, State);
		EnterRule(_localctx, 44, RULE_awards);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(OPEN);
			State = 419;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 418; subaward();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 421;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 423; @int();
			State = 424; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubawardContext : ParserRuleContext {
		public ITerminalNode[] OPEN() { return GetTokens(RecycleParser.OPEN); }
		public ITerminalNode OPEN(int i) {
			return GetToken(RecycleParser.OPEN, i);
		}
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode[] CLOSE() { return GetTokens(RecycleParser.CLOSE); }
		public ITerminalNode CLOSE(int i) {
			return GetToken(RecycleParser.CLOSE, i);
		}
		public CardattContext cardatt() {
			return GetRuleContext<CardattContext>(0);
		}
		public SubawardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subaward; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubaward(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubaward(this);
		}
	}

	[RuleVersion(0)]
	public SubawardContext subaward() {
		SubawardContext _localctx = new SubawardContext(Context, State);
		EnterRule(_localctx, 46, RULE_subaward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(OPEN);
			State = 427; namegr();
			State = 433;
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 428; Match(OPEN);
				State = 429; namegr();
				State = 430; Match(CLOSE);
				}
				break;
			case 2:
				{
				State = 432; cardatt();
				}
				break;
			}
			State = 435; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleactionContext : ParserRuleContext {
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public CycleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCycleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCycleaction(this);
		}
	}

	[RuleVersion(0)]
	public CycleactionContext cycleaction() {
		CycleactionContext _localctx = new CycleactionContext(Context, State);
		EnterRule(_localctx, 48, RULE_cycleaction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(T__24);
			State = 438;
			_la = TokenStream.La(1);
			if ( !(_la==T__25 || _la==T__26) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 443;
			switch (TokenStream.La(1)) {
			case OPEN:
				{
				State = 439; owner();
				}
				break;
			case T__26:
				{
				State = 440; Match(T__26);
				}
				break;
			case T__25:
				{
				State = 441; Match(T__25);
				}
				break;
			case T__27:
				{
				State = 442; Match(T__27);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public SetactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSetaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSetaction(this);
		}
	}

	[RuleVersion(0)]
	public SetactionContext setaction() {
		SetactionContext _localctx = new SetactionContext(Context, State);
		EnterRule(_localctx, 50, RULE_setaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 445; Match(T__28);
			State = 446; rawstorage();
			State = 447; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IncactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_incaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIncaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIncaction(this);
		}
	}

	[RuleVersion(0)]
	public IncactionContext incaction() {
		IncactionContext _localctx = new IncactionContext(Context, State);
		EnterRule(_localctx, 52, RULE_incaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; Match(T__29);
			State = 450; rawstorage();
			State = 451; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecactionContext : ParserRuleContext {
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public DecactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDecaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDecaction(this);
		}
	}

	[RuleVersion(0)]
	public DecactionContext decaction() {
		DecactionContext _localctx = new DecactionContext(Context, State);
		EnterRule(_localctx, 54, RULE_decaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453; Match(T__30);
			State = 454; rawstorage();
			State = 455; @int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoveactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public MoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moveaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMoveaction(this);
		}
	}

	[RuleVersion(0)]
	public MoveactionContext moveaction() {
		MoveactionContext _localctx = new MoveactionContext(Context, State);
		EnterRule(_localctx, 56, RULE_moveaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(T__31);
			State = 458; card();
			State = 459; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CopyactionContext : ParserRuleContext {
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public CopyactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_copyaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCopyaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCopyaction(this);
		}
	}

	[RuleVersion(0)]
	public CopyactionContext copyaction() {
		CopyactionContext _localctx = new CopyactionContext(Context, State);
		EnterRule(_localctx, 58, RULE_copyaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(T__32);
			State = 462; card();
			State = 463; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveactionContext : ParserRuleContext {
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public RemoveactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRemoveaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRemoveaction(this);
		}
	}

	[RuleVersion(0)]
	public RemoveactionContext removeaction() {
		RemoveactionContext _localctx = new RemoveactionContext(Context, State);
		EnterRule(_localctx, 60, RULE_removeaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(T__33);
			State = 466; card();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShuffleactionContext : ParserRuleContext {
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ShuffleactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shuffleaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterShuffleaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitShuffleaction(this);
		}
	}

	[RuleVersion(0)]
	public ShuffleactionContext shuffleaction() {
		ShuffleactionContext _localctx = new ShuffleactionContext(Context, State);
		EnterRule(_localctx, 62, RULE_shuffleaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 468; Match(T__34);
			State = 469; cstorage();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TurnactionContext : ParserRuleContext {
		public TurnactionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_turnaction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTurnaction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTurnaction(this);
		}
	}

	[RuleVersion(0)]
	public TurnactionContext turnaction() {
		TurnactionContext _localctx = new TurnactionContext(Context, State);
		EnterRule(_localctx, 64, RULE_turnaction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 471; Match(T__35);
			State = 472; Match(T__36);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public ActionContext action() {
			return GetRuleContext<ActionContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MoveactionContext moveaction() {
			return GetRuleContext<MoveactionContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RepeatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRepeat(this);
		}
	}

	[RuleVersion(0)]
	public RepeatContext repeat() {
		RepeatContext _localctx = new RepeatContext(Context, State);
		EnterRule(_localctx, 66, RULE_repeat);
		try {
			State = 484;
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474; Match(T__37);
				State = 475; @int();
				State = 476; action();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 478; Match(T__37);
				State = 479; Match(T__13);
				State = 480; Match(OPEN);
				State = 481; moveaction();
				State = 482; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowalldiceContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ThrowalldiceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwalldice; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterThrowalldice(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitThrowalldice(this);
		}
	}

	[RuleVersion(0)]
	public ThrowalldiceContext throwalldice() {
		ThrowalldiceContext _localctx = new ThrowalldiceContext(Context, State);
		EnterRule(_localctx, 68, RULE_throwalldice);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486; Match(T__38);
			State = 487; var();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveturnstatsContext : ParserRuleContext {
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public SaveturnstatsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveturnstats; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSaveturnstats(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSaveturnstats(this);
		}
	}

	[RuleVersion(0)]
	public SaveturnstatsContext saveturnstats() {
		SaveturnstatsContext _localctx = new SaveturnstatsContext(Context, State);
		EnterRule(_localctx, 70, RULE_saveturnstats);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(T__39);
			State = 490; namegr();
			State = 491; Match(T__40);
			State = 492; namegr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public MaxofContext maxof() {
			return GetRuleContext<MaxofContext>(0);
		}
		public MinofContext minof() {
			return GetRuleContext<MinofContext>(0);
		}
		public ActualContext actual() {
			return GetRuleContext<ActualContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_card; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCard(this);
		}
	}

	[RuleVersion(0)]
	public CardContext card() {
		CardContext _localctx = new CardContext(Context, State);
		EnterRule(_localctx, 72, RULE_card);
		try {
			State = 507;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 494; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495; maxof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 496; minof();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 497; actual();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 498; Match(OPEN);
				State = 502;
				switch (TokenStream.La(1)) {
				case T__41:
					{
					State = 499; Match(T__41);
					}
					break;
				case T__42:
					{
					State = 500; Match(T__42);
					}
					break;
				case T__0:
				case INTNUM:
				case OPEN:
					{
					State = 501; @int();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 504; cstorage();
				State = 505; Match(CLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ActualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actual; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterActual(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitActual(this);
		}
	}

	[RuleVersion(0)]
	public ActualContext actual() {
		ActualContext _localctx = new ActualContext(Context, State);
		EnterRule(_localctx, 74, RULE_actual);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; Match(OPEN);
			State = 510; Match(T__43);
			State = 511; card();
			State = 512; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RawstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext[] var() {
			return GetRuleContexts<VarContext>();
		}
		public VarContext var(int i) {
			return GetRuleContext<VarContext>(i);
		}
		public WhoContext who() {
			return GetRuleContext<WhoContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public RawstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rawstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRawstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRawstorage(this);
		}
	}

	[RuleVersion(0)]
	public RawstorageContext rawstorage() {
		RawstorageContext _localctx = new RawstorageContext(Context, State);
		EnterRule(_localctx, 76, RULE_rawstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514; Match(OPEN);
			State = 518;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 515; var();
				}
				break;
			case T__1:
				{
				State = 516; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 517; who();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 520; Match(T__44);
			State = 523;
			switch (TokenStream.La(1)) {
			case LETT:
				{
				State = 521; namegr();
				}
				break;
			case T__0:
				{
				State = 522; var();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 525; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstorageContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public UnionofContext unionof() {
			return GetRuleContext<UnionofContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public LocpreContext locpre() {
			return GetRuleContext<LocpreContext>(0);
		}
		public LocdescContext locdesc() {
			return GetRuleContext<LocdescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public MemstorageContext memstorage() {
			return GetRuleContext<MemstorageContext>(0);
		}
		public CstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstorage(this);
		}
	}

	[RuleVersion(0)]
	public CstorageContext cstorage() {
		CstorageContext _localctx = new CstorageContext(Context, State);
		EnterRule(_localctx, 78, RULE_cstorage);
		try {
			State = 540;
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 527; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 528; unionof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 529; filter();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 530; Match(OPEN);
				State = 531; locpre();
				State = 532; locdesc();
				State = 535;
				switch (TokenStream.La(1)) {
				case LETT:
					{
					State = 533; namegr();
					}
					break;
				case T__0:
					{
					State = 534; var();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 537; Match(CLOSE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 539; memstorage();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemstorageContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public MemstorageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memstorage; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemstorage(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemstorage(this);
		}
	}

	[RuleVersion(0)]
	public MemstorageContext memstorage() {
		MemstorageContext _localctx = new MemstorageContext(Context, State);
		EnterRule(_localctx, 80, RULE_memstorage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 542; Match(OPEN);
			State = 546;
			switch (TokenStream.La(1)) {
			case T__41:
				{
				State = 543; Match(T__41);
				}
				break;
			case T__42:
				{
				State = 544; Match(T__42);
				}
				break;
			case T__0:
			case INTNUM:
			case OPEN:
				{
				State = 545; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 548; memset();
			State = 549; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DievalueContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DievalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dievalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDievalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDievalue(this);
		}
	}

	[RuleVersion(0)]
	public DievalueContext dievalue() {
		DievalueContext _localctx = new DievalueContext(Context, State);
		EnterRule(_localctx, 82, RULE_dievalue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(OPEN);
			State = 552; Match(T__45);
			State = 553; var();
			State = 554; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemsetContext : ParserRuleContext {
		public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		public MemsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memset; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMemset(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMemset(this);
		}
	}

	[RuleVersion(0)]
	public MemsetContext memset() {
		MemsetContext _localctx = new MemsetContext(Context, State);
		EnterRule(_localctx, 84, RULE_memset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556; tuple();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTuple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTuple(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 86, RULE_tuple);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 558; Match(OPEN);
			State = 559; Match(T__46);
			State = 560; @int();
			State = 561; cstorage();
			State = 562; Match(T__47);
			State = 563; var();
			State = 564; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocpreContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public LocpreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locpre; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocpre(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocpre(this);
		}
	}

	[RuleVersion(0)]
	public LocpreContext locpre() {
		LocpreContext _localctx = new LocpreContext(Context, State);
		EnterRule(_localctx, 88, RULE_locpre);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			switch (TokenStream.La(1)) {
			case T__0:
				{
				State = 566; var();
				}
				break;
			case T__1:
				{
				State = 567; Match(T__1);
				}
				break;
			case OPEN:
				{
				State = 568; whop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocdescContext : ParserRuleContext {
		public LocdescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locdesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterLocdesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitLocdesc(this);
		}
	}

	[RuleVersion(0)]
	public LocdescContext locdesc() {
		LocdescContext _localctx = new LocdescContext(Context, State);
		EnterRule(_localctx, 90, RULE_locdesc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhoContext : ParserRuleContext {
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public WhoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_who; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWho(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWho(this);
		}
	}

	[RuleVersion(0)]
	public WhoContext who() {
		WhoContext _localctx = new WhoContext(Context, State);
		EnterRule(_localctx, 92, RULE_who);
		try {
			State = 575;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 573; whot();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 574; whop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhopContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext owner() {
			return GetRuleContext<OwnerContext>(0);
		}
		public WhopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhop(this);
		}
	}

	[RuleVersion(0)]
	public WhopContext whop() {
		WhopContext _localctx = new WhopContext(Context, State);
		EnterRule(_localctx, 94, RULE_whop);
		try {
			State = 583;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 577; Match(OPEN);
				State = 578; whodesc();
				State = 579; Match(T__4);
				State = 580; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 582; owner();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhotContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhodescContext whodesc() {
			return GetRuleContext<WhodescContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext teamp() {
			return GetRuleContext<TeampContext>(0);
		}
		public WhotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whot; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhot(this);
		}
	}

	[RuleVersion(0)]
	public WhotContext whot() {
		WhotContext _localctx = new WhotContext(Context, State);
		EnterRule(_localctx, 96, RULE_whot);
		try {
			State = 591;
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 585; Match(OPEN);
				State = 586; whodesc();
				State = 587; Match(T__5);
				State = 588; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 590; teamp();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhodescContext : ParserRuleContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public WhodescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whodesc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterWhodesc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitWhodesc(this);
		}
	}

	[RuleVersion(0)]
	public WhodescContext whodesc() {
		WhodescContext _localctx = new WhodescContext(Context, State);
		EnterRule(_localctx, 98, RULE_whodesc);
		try {
			State = 597;
			switch (TokenStream.La(1)) {
			case T__0:
			case INTNUM:
			case OPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 593; @int();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 2);
				{
				State = 594; Match(T__27);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 3);
				{
				State = 595; Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 4);
				{
				State = 596; Match(T__26);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OwnerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_owner; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOwner(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOwner(this);
		}
	}

	[RuleVersion(0)]
	public OwnerContext owner() {
		OwnerContext _localctx = new OwnerContext(Context, State);
		EnterRule(_localctx, 100, RULE_owner);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599; Match(OPEN);
			State = 600; Match(T__52);
			State = 601; card();
			State = 602; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TeampContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public WhopContext whop() {
			return GetRuleContext<WhopContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public TeampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_teamp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTeamp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTeamp(this);
		}
	}

	[RuleVersion(0)]
	public TeampContext teamp() {
		TeampContext _localctx = new TeampContext(Context, State);
		EnterRule(_localctx, 102, RULE_teamp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; Match(OPEN);
			State = 605; Match(T__5);
			State = 606; whop();
			State = 607; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public OtherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_other; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterOther(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitOther(this);
		}
	}

	[RuleVersion(0)]
	public OtherContext other() {
		OtherContext _localctx = new OtherContext(Context, State);
		EnterRule(_localctx, 104, RULE_other);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; Match(OPEN);
			State = 610; Match(T__53);
			State = 611;
			_la = TokenStream.La(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 612; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public TypedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterTyped(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitTyped(this);
		}
	}

	[RuleVersion(0)]
	public TypedContext typed() {
		TypedContext _localctx = new TypedContext(Context, State);
		EnterRule(_localctx, 106, RULE_typed);
		try {
			State = 619;
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 614; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 615; @int();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 616; boolean();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 617; namegr();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 618; collection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public StrcollectionContext strcollection() {
			return GetRuleContext<StrcollectionContext>(0);
		}
		public CstoragecollectionContext cstoragecollection() {
			return GetRuleContext<CstoragecollectionContext>(0);
		}
		public WhotContext whot() {
			return GetRuleContext<WhotContext>(0);
		}
		public OtherContext other() {
			return GetRuleContext<OtherContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public FilterContext filter() {
			return GetRuleContext<FilterContext>(0);
		}
		public CollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCollection(this);
		}
	}

	[RuleVersion(0)]
	public CollectionContext collection() {
		CollectionContext _localctx = new CollectionContext(Context, State);
		EnterRule(_localctx, 108, RULE_collection);
		try {
			State = 631;
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622; cstorage();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 623; strcollection();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 624; cstoragecollection();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 625; Match(T__4);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 626; Match(T__5);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 627; whot();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 628; other();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 629; range();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 630; filter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrcollectionContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public NamegrContext[] namegr() {
			return GetRuleContexts<NamegrContext>();
		}
		public NamegrContext namegr(int i) {
			return GetRuleContext<NamegrContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public StrcollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strcollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterStrcollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitStrcollection(this);
		}
	}

	[RuleVersion(0)]
	public StrcollectionContext strcollection() {
		StrcollectionContext _localctx = new StrcollectionContext(Context, State);
		EnterRule(_localctx, 110, RULE_strcollection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 633; Match(OPEN);
			State = 639;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 634; namegr();
					State = 635; Match(T__21);
					}
					} 
				}
				State = 641;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 642; namegr();
			State = 643; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CstoragecollectionContext : ParserRuleContext {
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public CstoragecollectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cstoragecollection; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCstoragecollection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCstoragecollection(this);
		}
	}

	[RuleVersion(0)]
	public CstoragecollectionContext cstoragecollection() {
		CstoragecollectionContext _localctx = new CstoragecollectionContext(Context, State);
		EnterRule(_localctx, 112, RULE_cstoragecollection);
		try {
			State = 648;
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645; memset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 646; agg();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 647; let();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 114, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650; Match(OPEN);
			State = 651; Match(T__54);
			State = 652; @int();
			State = 653; Match(T__55);
			State = 654; @int();
			State = 655; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CollectionContext collection() {
			return GetRuleContext<CollectionContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 116, RULE_filter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657; Match(OPEN);
			State = 658; Match(T__56);
			State = 659; collection();
			State = 660; var();
			State = 661; boolean();
			State = 662; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrcompContext : ParserRuleContext {
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardattContext[] cardatt() {
			return GetRuleContexts<CardattContext>();
		}
		public CardattContext cardatt(int i) {
			return GetRuleContext<CardattContext>(i);
		}
		public AttrcompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrcomp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAttrcomp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAttrcomp(this);
		}
	}

	[RuleVersion(0)]
	public AttrcompContext attrcomp() {
		AttrcompContext _localctx = new AttrcompContext(Context, State);
		EnterRule(_localctx, 118, RULE_attrcomp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664; Match(EQOP);
			State = 665; cardatt();
			State = 666; cardatt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CardattContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public NamegrContext namegr() {
			return GetRuleContext<NamegrContext>(0);
		}
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public CardattContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cardatt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterCardatt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitCardatt(this);
		}
	}

	[RuleVersion(0)]
	public CardattContext cardatt() {
		CardattContext _localctx = new CardattContext(Context, State);
		EnterRule(_localctx, 120, RULE_cardatt);
		try {
			State = 679;
			switch (TokenStream.La(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 668; var();
				}
				break;
			case LETT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 669; namegr();
				}
				break;
			case OPEN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 670; Match(OPEN);
				State = 671; Match(T__57);
				State = 674;
				switch (TokenStream.La(1)) {
				case T__0:
					{
					State = 672; var();
					}
					break;
				case LETT:
					{
					State = 673; namegr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 676; card();
				State = 677; Match(CLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ITerminalNode BOOLOP() { return GetToken(RecycleParser.BOOLOP, 0); }
		public BooleanContext[] boolean() {
			return GetRuleContexts<BooleanContext>();
		}
		public BooleanContext boolean(int i) {
			return GetRuleContext<BooleanContext>(i);
		}
		public IntopContext intop() {
			return GetRuleContext<IntopContext>(0);
		}
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public AttrcompContext attrcomp() {
			return GetRuleContext<AttrcompContext>(0);
		}
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public CardContext[] card() {
			return GetRuleContexts<CardContext>();
		}
		public CardContext card(int i) {
			return GetRuleContext<CardContext>(i);
		}
		public ITerminalNode UNOP() { return GetToken(RecycleParser.UNOP, 0); }
		public WhopContext[] whop() {
			return GetRuleContexts<WhopContext>();
		}
		public WhopContext whop(int i) {
			return GetRuleContext<WhopContext>(i);
		}
		public WhotContext[] whot() {
			return GetRuleContexts<WhotContext>();
		}
		public WhotContext whot(int i) {
			return GetRuleContext<WhotContext>(i);
		}
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 122, RULE_boolean);
		try {
			int _alt;
			State = 713;
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 681; Match(OPEN);
				State = 708;
				switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
				case 1:
					{
					State = 682; Match(BOOLOP);
					State = 683; boolean();
					State = 685;
					ErrorHandler.Sync(this);
					_alt = 1+1;
					do {
						switch (_alt) {
						case 1+1:
							{
							{
							State = 684; boolean();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 687;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
					} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				case 2:
					{
					State = 689; intop();
					State = 690; @int();
					State = 691; @int();
					}
					break;
				case 3:
					{
					State = 693; attrcomp();
					}
					break;
				case 4:
					{
					State = 694; Match(EQOP);
					State = 695; card();
					State = 696; card();
					}
					break;
				case 5:
					{
					State = 698; Match(UNOP);
					State = 699; boolean();
					}
					break;
				case 6:
					{
					State = 700; Match(EQOP);
					State = 701; whop();
					State = 702; whop();
					}
					break;
				case 7:
					{
					State = 704; Match(EQOP);
					State = 705; whot();
					State = 706; whot();
					}
					break;
				}
				State = 710; Match(CLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 712; agg();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntopContext : ParserRuleContext {
		public ITerminalNode COMPOP() { return GetToken(RecycleParser.COMPOP, 0); }
		public ITerminalNode EQOP() { return GetToken(RecycleParser.EQOP, 0); }
		public IntopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterIntop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitIntop(this);
		}
	}

	[RuleVersion(0)]
	public IntopContext intop() {
		IntopContext _localctx = new IntopContext(Context, State);
		EnterRule(_localctx, 124, RULE_intop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 715;
			_la = TokenStream.La(1);
			if ( !(_la==COMPOP || _la==EQOP) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AddContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}

	[RuleVersion(0)]
	public AddContext add() {
		AddContext _localctx = new AddContext(Context, State);
		EnterRule(_localctx, 126, RULE_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 717; Match(OPEN);
			State = 718; Match(T__58);
			State = 719; @int();
			State = 720; @int();
			State = 721; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mult; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMult(this);
		}
	}

	[RuleVersion(0)]
	public MultContext mult() {
		MultContext _localctx = new MultContext(Context, State);
		EnterRule(_localctx, 128, RULE_mult);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723; Match(OPEN);
			State = 724; Match(T__59);
			State = 725; @int();
			State = 726; @int();
			State = 727; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubtractContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SubtractContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subtract; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}

	[RuleVersion(0)]
	public SubtractContext subtract() {
		SubtractContext _localctx = new SubtractContext(Context, State);
		EnterRule(_localctx, 130, RULE_subtract);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 729; Match(OPEN);
			State = 730; Match(T__60);
			State = 731; @int();
			State = 732; @int();
			State = 733; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMod(this);
		}
	}

	[RuleVersion(0)]
	public ModContext mod() {
		ModContext _localctx = new ModContext(Context, State);
		EnterRule(_localctx, 132, RULE_mod);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735; Match(OPEN);
			State = 736; Match(T__61);
			State = 737; @int();
			State = 738; @int();
			State = 739; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivideContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public IntContext[] @int() {
			return GetRuleContexts<IntContext>();
		}
		public IntContext @int(int i) {
			return GetRuleContext<IntContext>(i);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public DivideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divide; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}

	[RuleVersion(0)]
	public DivideContext divide() {
		DivideContext _localctx = new DivideContext(Context, State);
		EnterRule(_localctx, 134, RULE_divide);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741; Match(OPEN);
			State = 742; Match(T__62);
			State = 743; @int();
			State = 744; @int();
			State = 745; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public MemsetContext memset() {
			return GetRuleContext<MemsetContext>(0);
		}
		public SizeofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSizeof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSizeof(this);
		}
	}

	[RuleVersion(0)]
	public SizeofContext @sizeof() {
		SizeofContext _localctx = new SizeofContext(Context, State);
		EnterRule(_localctx, 136, RULE_sizeof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 747; Match(OPEN);
			State = 748; Match(T__63);
			State = 752;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 749; var();
				}
				break;
			case 2:
				{
				State = 750; cstorage();
				}
				break;
			case 3:
				{
				State = 751; memset();
				}
				break;
			}
			State = 754; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MaxofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MaxofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_maxof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMaxof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMaxof(this);
		}
	}

	[RuleVersion(0)]
	public MaxofContext maxof() {
		MaxofContext _localctx = new MaxofContext(Context, State);
		EnterRule(_localctx, 138, RULE_maxof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; Match(OPEN);
			State = 757; Match(T__8);
			State = 758; cstorage();
			State = 759; Match(T__47);
			State = 760; var();
			State = 761; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public MinofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterMinof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitMinof(this);
		}
	}

	[RuleVersion(0)]
	public MinofContext minof() {
		MinofContext _localctx = new MinofContext(Context, State);
		EnterRule(_localctx, 140, RULE_minof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763; Match(OPEN);
			State = 764; Match(T__7);
			State = 765; cstorage();
			State = 766; Match(T__47);
			State = 767; var();
			State = 768; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionofContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public AggContext agg() {
			return GetRuleContext<AggContext>(0);
		}
		public CstorageContext[] cstorage() {
			return GetRuleContexts<CstorageContext>();
		}
		public CstorageContext cstorage(int i) {
			return GetRuleContext<CstorageContext>(i);
		}
		public UnionofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionof; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterUnionof(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitUnionof(this);
		}
	}

	[RuleVersion(0)]
	public UnionofContext unionof() {
		UnionofContext _localctx = new UnionofContext(Context, State);
		EnterRule(_localctx, 142, RULE_unionof);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 770; Match(OPEN);
			State = 771; Match(T__64);
			State = 778;
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 772; agg();
				}
				break;
			case 2:
				{
				State = 774;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 773; cstorage();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 776;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 780; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CstorageContext cstorage() {
			return GetRuleContext<CstorageContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public SumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitSum(this);
		}
	}

	[RuleVersion(0)]
	public SumContext sum() {
		SumContext _localctx = new SumContext(Context, State);
		EnterRule(_localctx, 144, RULE_sum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 782; Match(OPEN);
			State = 783; Match(T__65);
			State = 784; cstorage();
			State = 785; Match(T__47);
			State = 786; var();
			State = 787; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScoreContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(RecycleParser.OPEN, 0); }
		public CardContext card() {
			return GetRuleContext<CardContext>(0);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode CLOSE() { return GetToken(RecycleParser.CLOSE, 0); }
		public ScoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_score; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterScore(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitScore(this);
		}
	}

	[RuleVersion(0)]
	public ScoreContext score() {
		ScoreContext _localctx = new ScoreContext(Context, State);
		EnterRule(_localctx, 146, RULE_score);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789; Match(OPEN);
			State = 790; Match(T__66);
			State = 791; card();
			State = 792; Match(T__47);
			State = 793; var();
			State = 794; Match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public SizeofContext @sizeof() {
			return GetRuleContext<SizeofContext>(0);
		}
		public MultContext mult() {
			return GetRuleContext<MultContext>(0);
		}
		public SubtractContext subtract() {
			return GetRuleContext<SubtractContext>(0);
		}
		public ModContext mod() {
			return GetRuleContext<ModContext>(0);
		}
		public AddContext add() {
			return GetRuleContext<AddContext>(0);
		}
		public DivideContext divide() {
			return GetRuleContext<DivideContext>(0);
		}
		public SumContext sum() {
			return GetRuleContext<SumContext>(0);
		}
		public RawstorageContext rawstorage() {
			return GetRuleContext<RawstorageContext>(0);
		}
		public ScoreContext score() {
			return GetRuleContext<ScoreContext>(0);
		}
		public DievalueContext dievalue() {
			return GetRuleContext<DievalueContext>(0);
		}
		public ITerminalNode[] INTNUM() { return GetTokens(RecycleParser.INTNUM); }
		public ITerminalNode INTNUM(int i) {
			return GetToken(RecycleParser.INTNUM, i);
		}
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(Context, State);
		EnterRule(_localctx, 148, RULE_int);
		try {
			int _alt;
			State = 812;
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 796; var();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 797; @sizeof();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 798; mult();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 799; subtract();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 800; mod();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 801; add();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 802; divide();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 803; sum();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 804; rawstorage();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 805; score();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 806; dievalue();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 808;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 807; Match(INTNUM);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 810;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,55,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamegrContext : ParserRuleContext {
		public ITerminalNode[] LETT() { return GetTokens(RecycleParser.LETT); }
		public ITerminalNode LETT(int i) {
			return GetToken(RecycleParser.LETT, i);
		}
		public NamegrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namegr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.EnterNamegr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRecycleListener typedListener = listener as IRecycleListener;
			if (typedListener != null) typedListener.ExitNamegr(this);
		}
	}

	[RuleVersion(0)]
	public NamegrContext namegr() {
		NamegrContext _localctx = new NamegrContext(Context, State);
		EnterRule(_localctx, 150, RULE_namegr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 815;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 814; Match(LETT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 817;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3O\x336\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\xA1\n\x3\f\x3\xE\x3\xA4\v\x3\x3\x3\x3"+
		"\x3\x3\x3\x6\x3\xA9\n\x3\r\x3\xE\x3\xAA\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\xBA\n\x4\x3\x4"+
		"\x3\x4\x6\x4\xBE\n\x4\r\x4\xE\x4\xBF\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x6\x5\xCA\n\x5\r\x5\xE\x5\xCB\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xEB"+
		"\n\b\x3\b\x3\b\x3\b\x5\b\xF0\n\b\x3\t\x3\t\x3\t\x3\t\x6\t\xF6\n\t\r\t"+
		"\xE\t\xF7\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x6\t\x101\n\t\r\t\xE\t\x102"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x10A\n\t\x3\n\x3\n\x3\n\x3\n\x6\n\x110"+
		"\n\n\r\n\xE\n\x111\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x119\n\n\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x127\n\v\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\x131\n\f\x3\f\x3\f\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x5\r\x13C\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x14B\n\xF\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x10\x6\x10\x152\n\x10\r\x10\xE\x10\x153\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x6\x12\x15F\n\x12\r"+
		"\x12\xE\x12\x160\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x6\x14"+
		"\x16A\n\x14\r\x14\xE\x14\x16B\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15"+
		"\x173\n\x15\f\x15\xE\x15\x176\v\x15\x3\x15\x3\x15\a\x15\x17A\n\x15\f\x15"+
		"\xE\x15\x17D\v\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x16\x3\x16\x3\x16\a\x16\x189\n\x16\f\x16\xE\x16\x18C\v\x16\x3\x16\x3"+
		"\x16\a\x16\x190\n\x16\f\x16\xE\x16\x193\v\x16\x3\x16\x3\x16\x5\x16\x197"+
		"\n\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x6\x17\x19E\n\x17\r\x17\xE\x17"+
		"\x19F\x3\x17\x3\x17\x3\x18\x3\x18\x6\x18\x1A6\n\x18\r\x18\xE\x18\x1A7"+
		"\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\x1B4\n\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x5\x1A\x1BE\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3"+
		"#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x1E7\n#\x3$\x3$\x3$\x3%\x3%\x3%\x3%"+
		"\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x1F9\n&\x3&\x3&\x3&\x5&\x1FE"+
		"\n&\x3\'\x3\'\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x5(\x209\n(\x3(\x3(\x3(\x5"+
		"(\x20E\n(\x3(\x3(\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x3)\x5)\x21A\n)\x3)\x3)"+
		"\x3)\x5)\x21F\n)\x3*\x3*\x3*\x3*\x5*\x225\n*\x3*\x3*\x3*\x3+\x3+\x3+\x3"+
		"+\x3+\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3-\x3.\x3.\x3.\x5.\x23C\n."+
		"\x3/\x3/\x3\x30\x3\x30\x5\x30\x242\n\x30\x3\x31\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x5\x31\x24A\n\x31\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x5\x32\x252\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x5\x33\x258\n\x33\x3\x34"+
		"\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x3\x37\x3\x37\x3\x37\x3\x37\x3\x37\x5\x37"+
		"\x26E\n\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3"+
		"\x38\x3\x38\x5\x38\x27A\n\x38\x3\x39\x3\x39\x3\x39\x3\x39\a\x39\x280\n"+
		"\x39\f\x39\xE\x39\x283\v\x39\x3\x39\x3\x39\x3\x39\x3:\x3:\x3:\x5:\x28B"+
		"\n:\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3"+
		"=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x2A5\n>\x3>\x3>\x3>\x5>\x2AA\n>\x3?"+
		"\x3?\x3?\x3?\x6?\x2B0\n?\r?\xE?\x2B1\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3"+
		"?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x2C7\n?\x3?\x3?\x3?\x5?"+
		"\x2CC\n?\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42"+
		"\x3\x42\x3\x42\x3\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43"+
		"\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x44\x3\x45\x3\x45\x3\x45\x3\x45"+
		"\x3\x45\x3\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x5\x46\x2F3\n\x46\x3"+
		"\x46\x3\x46\x3G\x3G\x3G\x3G\x3G\x3G\x3G\x3H\x3H\x3H\x3H\x3H\x3H\x3H\x3"+
		"I\x3I\x3I\x3I\x6I\x309\nI\rI\xEI\x30A\x5I\x30D\nI\x3I\x3I\x3J\x3J\x3J"+
		"\x3J\x3J\x3J\x3J\x3K\x3K\x3K\x3K\x3K\x3K\x3K\x3L\x3L\x3L\x3L\x3L\x3L\x3"+
		"L\x3L\x3L\x3L\x3L\x3L\x6L\x32B\nL\rL\xEL\x32C\x5L\x32F\nL\x3M\x6M\x332"+
		"\nM\rM\xEM\x333\x3M\x14\xA2\xAA\xBF\xCB\xF7\x102\x111\x153\x16B\x174\x17B"+
		"\x18A\x191\x19F\x1A7\x281\x2B1\x30A\x2N\x2\x4\x6\b\n\f\xE\x10\x12\x14"+
		"\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLN"+
		"PRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90"+
		"\x92\x94\x96\x98\x2\b\x3\x2\a\b\x3\x2\n\v\x3\x2\xF\x10\x3\x2\x1C\x1D\x3"+
		"\x2\x33\x36\x3\x2GH\x364\x2\x9A\x3\x2\x2\x2\x4\x9D\x3\x2\x2\x2\x6\xAF"+
		"\x3\x2\x2\x2\b\xC3\x3\x2\x2\x2\n\xCF\x3\x2\x2\x2\f\xD5\x3\x2\x2\x2\xE"+
		"\xEF\x3\x2\x2\x2\x10\x109\x3\x2\x2\x2\x12\x118\x3\x2\x2\x2\x14\x126\x3"+
		"\x2\x2\x2\x16\x128\x3\x2\x2\x2\x18\x134\x3\x2\x2\x2\x1A\x13F\x3\x2\x2"+
		"\x2\x1C\x145\x3\x2\x2\x2\x1E\x14E\x3\x2\x2\x2 \x155\x3\x2\x2\x2\"\x15A"+
		"\x3\x2\x2\x2$\x162\x3\x2\x2\x2&\x166\x3\x2\x2\x2(\x16F\x3\x2\x2\x2*\x196"+
		"\x3\x2\x2\x2,\x198\x3\x2\x2\x2.\x1A3\x3\x2\x2\x2\x30\x1AC\x3\x2\x2\x2"+
		"\x32\x1B7\x3\x2\x2\x2\x34\x1BF\x3\x2\x2\x2\x36\x1C3\x3\x2\x2\x2\x38\x1C7"+
		"\x3\x2\x2\x2:\x1CB\x3\x2\x2\x2<\x1CF\x3\x2\x2\x2>\x1D3\x3\x2\x2\x2@\x1D6"+
		"\x3\x2\x2\x2\x42\x1D9\x3\x2\x2\x2\x44\x1E6\x3\x2\x2\x2\x46\x1E8\x3\x2"+
		"\x2\x2H\x1EB\x3\x2\x2\x2J\x1FD\x3\x2\x2\x2L\x1FF\x3\x2\x2\x2N\x204\x3"+
		"\x2\x2\x2P\x21E\x3\x2\x2\x2R\x220\x3\x2\x2\x2T\x229\x3\x2\x2\x2V\x22E"+
		"\x3\x2\x2\x2X\x230\x3\x2\x2\x2Z\x23B\x3\x2\x2\x2\\\x23D\x3\x2\x2\x2^\x241"+
		"\x3\x2\x2\x2`\x249\x3\x2\x2\x2\x62\x251\x3\x2\x2\x2\x64\x257\x3\x2\x2"+
		"\x2\x66\x259\x3\x2\x2\x2h\x25E\x3\x2\x2\x2j\x263\x3\x2\x2\x2l\x26D\x3"+
		"\x2\x2\x2n\x279\x3\x2\x2\x2p\x27B\x3\x2\x2\x2r\x28A\x3\x2\x2\x2t\x28C"+
		"\x3\x2\x2\x2v\x293\x3\x2\x2\x2x\x29A\x3\x2\x2\x2z\x2A9\x3\x2\x2\x2|\x2CB"+
		"\x3\x2\x2\x2~\x2CD\x3\x2\x2\x2\x80\x2CF\x3\x2\x2\x2\x82\x2D5\x3\x2\x2"+
		"\x2\x84\x2DB\x3\x2\x2\x2\x86\x2E1\x3\x2\x2\x2\x88\x2E7\x3\x2\x2\x2\x8A"+
		"\x2ED\x3\x2\x2\x2\x8C\x2F6\x3\x2\x2\x2\x8E\x2FD\x3\x2\x2\x2\x90\x304\x3"+
		"\x2\x2\x2\x92\x310\x3\x2\x2\x2\x94\x317\x3\x2\x2\x2\x96\x32E\x3\x2\x2"+
		"\x2\x98\x331\x3\x2\x2\x2\x9A\x9B\a\x3\x2\x2\x9B\x9C\x5\x98M\x2\x9C\x3"+
		"\x3\x2\x2\x2\x9D\x9E\aL\x2\x2\x9E\xA2\a\x4\x2\x2\x9F\xA1\x5\x1A\xE\x2"+
		"\xA0\x9F\x3\x2\x2\x2\xA1\xA4\x3\x2\x2\x2\xA2\xA3\x3\x2\x2\x2\xA2\xA0\x3"+
		"\x2\x2\x2\xA3\xA5\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA5\xA8\x5\x6\x4\x2"+
		"\xA6\xA9\x5\x10\t\x2\xA7\xA9\x5\b\x5\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3"+
		"\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAA\xA8\x3\x2\x2\x2"+
		"\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x5\n\x6\x2\xAD\xAE\aM\x2\x2\xAE\x5\x3\x2"+
		"\x2\x2\xAF\xB0\aL\x2\x2\xB0\xB1\a\x5\x2\x2\xB1\xB2\x5\x1C\xF\x2\xB2\xB3"+
		"\aL\x2\x2\xB3\xB4\x5\x1E\x10\x2\xB4\xBD\aM\x2\x2\xB5\xB9\aL\x2\x2\xB6"+
		"\xBA\x5 \x11\x2\xB7\xBA\x5\x44#\x2\xB8\xBA\x5\"\x12\x2\xB9\xB6\x3\x2\x2"+
		"\x2\xB9\xB7\x3\x2\x2\x2\xB9\xB8\x3\x2\x2\x2\xBA\xBB\x3\x2\x2\x2\xBB\xBC"+
		"\aM\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD\xB5\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2"+
		"\xBF\xC0\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\a"+
		"M\x2\x2\xC2\a\x3\x2\x2\x2\xC3\xC4\aL\x2\x2\xC4\xC5\a\x6\x2\x2\xC5\xC6"+
		"\t\x2\x2\x2\xC6\xC9\x5\f\a\x2\xC7\xCA\x5\x10\t\x2\xC8\xCA\x5\b\x5\x2\xC9"+
		"\xC7\x3\x2\x2\x2\xC9\xC8\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCC\x3\x2"+
		"\x2\x2\xCB\xC9\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCE\aM\x2\x2\xCE\t"+
		"\x3\x2\x2\x2\xCF\xD0\aL\x2\x2\xD0\xD1\a\t\x2\x2\xD1\xD2\t\x3\x2\x2\xD2"+
		"\xD3\x5\x96L\x2\xD3\xD4\aM\x2\x2\xD4\v\x3\x2\x2\x2\xD5\xD6\aL\x2\x2\xD6"+
		"\xD7\a\f\x2\x2\xD7\xD8\x5|?\x2\xD8\xD9\aM\x2\x2\xD9\r\x3\x2\x2\x2\xDA"+
		"\xEA\aL\x2\x2\xDB\xEB\x5,\x17\x2\xDC\xEB\x5\x1E\x10\x2\xDD\xEB\x5 \x11"+
		"\x2\xDE\xEB\x5\x32\x1A\x2\xDF\xEB\x5\x34\x1B\x2\xE0\xEB\x5:\x1E\x2\xE1"+
		"\xEB\x5<\x1F\x2\xE2\xEB\x5\x36\x1C\x2\xE3\xEB\x5\x38\x1D\x2\xE4\xEB\x5"+
		"> \x2\xE5\xEB\x5\x42\"\x2\xE6\xEB\x5@!\x2\xE7\xEB\x5\x44#\x2\xE8\xEB\x5"+
		"\x46$\x2\xE9\xEB\x5H%\x2\xEA\xDB\x3\x2\x2\x2\xEA\xDC\x3\x2\x2\x2\xEA\xDD"+
		"\x3\x2\x2\x2\xEA\xDE\x3\x2\x2\x2\xEA\xDF\x3\x2\x2\x2\xEA\xE0\x3\x2\x2"+
		"\x2\xEA\xE1\x3\x2\x2\x2\xEA\xE2\x3\x2\x2\x2\xEA\xE3\x3\x2\x2\x2\xEA\xE4"+
		"\x3\x2\x2\x2\xEA\xE5\x3\x2\x2\x2\xEA\xE6\x3\x2\x2\x2\xEA\xE7\x3\x2\x2"+
		"\x2\xEA\xE8\x3\x2\x2\x2\xEA\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED"+
		"\aM\x2\x2\xED\xF0\x3\x2\x2\x2\xEE\xF0\x5\x16\f\x2\xEF\xDA\x3\x2\x2\x2"+
		"\xEF\xEE\x3\x2\x2\x2\xF0\xF\x3\x2\x2\x2\xF1\xF2\aL\x2\x2\xF2\xF3\a\r\x2"+
		"\x2\xF3\xF5\aL\x2\x2\xF4\xF6\x5\x14\v\x2\xF5\xF4\x3\x2\x2\x2\xF6\xF7\x3"+
		"\x2\x2\x2\xF7\xF8\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2"+
		"\xF9\xFA\aM\x2\x2\xFA\xFB\aM\x2\x2\xFB\x10A\x3\x2\x2\x2\xFC\xFD\aL\x2"+
		"\x2\xFD\xFE\a\xE\x2\x2\xFE\x100\aL\x2\x2\xFF\x101\x5\x14\v\x2\x100\xFF"+
		"\x3\x2\x2\x2\x101\x102\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x102\x100\x3"+
		"\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\aM\x2\x2\x105\x106\aM\x2\x2"+
		"\x106\x10A\x3\x2\x2\x2\x107\x10A\x5\x16\f\x2\x108\x10A\x5\x18\r\x2\x109"+
		"\xF1\x3\x2\x2\x2\x109\xFC\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x109\x108"+
		"\x3\x2\x2\x2\x10A\x11\x3\x2\x2\x2\x10B\x10C\aL\x2\x2\x10C\x10D\a\xE\x2"+
		"\x2\x10D\x10F\aL\x2\x2\x10E\x110\x5\x14\v\x2\x10F\x10E\x3\x2\x2\x2\x110"+
		"\x111\x3\x2\x2\x2\x111\x112\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113"+
		"\x3\x2\x2\x2\x113\x114\aM\x2\x2\x114\x115\aM\x2\x2\x115\x119\x3\x2\x2"+
		"\x2\x116\x119\x5\x16\f\x2\x117\x119\x5\x18\r\x2\x118\x10B\x3\x2\x2\x2"+
		"\x118\x116\x3\x2\x2\x2\x118\x117\x3\x2\x2\x2\x119\x13\x3\x2\x2\x2\x11A"+
		"\x11B\aL\x2\x2\x11B\x11C\x5|?\x2\x11C\x11D\x5\x12\n\x2\x11D\x11E\aM\x2"+
		"\x2\x11E\x127\x3\x2\x2\x2\x11F\x127\x5\x12\n\x2\x120\x121\aL\x2\x2\x121"+
		"\x122\x5|?\x2\x122\x123\x5\xE\b\x2\x123\x124\aM\x2\x2\x124\x127\x3\x2"+
		"\x2\x2\x125\x127\x5\xE\b\x2\x126\x11A\x3\x2\x2\x2\x126\x11F\x3\x2\x2\x2"+
		"\x126\x120\x3\x2\x2\x2\x126\x125\x3\x2\x2\x2\x127\x15\x3\x2\x2\x2\x128"+
		"\x129\aL\x2\x2\x129\x12A\t\x4\x2\x2\x12A\x12B\x5n\x38\x2\x12B\x130\x5"+
		"\x2\x2\x2\x12C\x131\x5\x14\v\x2\x12D\x131\x5|?\x2\x12E\x131\x5P)\x2\x12F"+
		"\x131\x5N(\x2\x130\x12C\x3\x2\x2\x2\x130\x12D\x3\x2\x2\x2\x130\x12E\x3"+
		"\x2\x2\x2\x130\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\aM\x2"+
		"\x2\x133\x17\x3\x2\x2\x2\x134\x135\aL\x2\x2\x135\x136\a\x11\x2\x2\x136"+
		"\x137\x5l\x37\x2\x137\x13B\x5\x2\x2\x2\x138\x13C\x5\x10\t\x2\x139\x13C"+
		"\x5\xE\b\x2\x13A\x13C\x5\x14\v\x2\x13B\x138\x3\x2\x2\x2\x13B\x139\x3\x2"+
		"\x2\x2\x13B\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E\aM\x2\x2"+
		"\x13E\x19\x3\x2\x2\x2\x13F\x140\aL\x2\x2\x140\x141\a\x12\x2\x2\x141\x142"+
		"\x5l\x37\x2\x142\x143\x5\x2\x2\x2\x143\x144\aM\x2\x2\x144\x1B\x3\x2\x2"+
		"\x2\x145\x146\aL\x2\x2\x146\x147\a\x13\x2\x2\x147\x14A\a\x14\x2\x2\x148"+
		"\x14B\x5\x2\x2\x2\x149\x14B\x5\x96L\x2\x14A\x148\x3\x2\x2\x2\x14A\x149"+
		"\x3\x2\x2\x2\x14B\x14C\x3\x2\x2\x2\x14C\x14D\aM\x2\x2\x14D\x1D\x3\x2\x2"+
		"\x2\x14E\x14F\a\x13\x2\x2\x14F\x151\a\x15\x2\x2\x150\x152\x5(\x15\x2\x151"+
		"\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x153\x151"+
		"\x3\x2\x2\x2\x154\x1F\x3\x2\x2\x2\x155\x156\a\x13\x2\x2\x156\x157\a\x16"+
		"\x2\x2\x157\x158\x5P)\x2\x158\x159\x5&\x14\x2\x159!\x3\x2\x2\x2\x15A\x15B"+
		"\a\x13\x2\x2\x15B\x15C\a\x17\x2\x2\x15C\x15E\x5\x2\x2\x2\x15D\x15F\x5"+
		"$\x13\x2\x15E\x15D\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x15E\x3\x2\x2"+
		"\x2\x160\x161\x3\x2\x2\x2\x161#\x3\x2\x2\x2\x162\x163\aL\x2\x2\x163\x164"+
		"\x5\x96L\x2\x164\x165\aM\x2\x2\x165%\x3\x2\x2\x2\x166\x167\aL\x2\x2\x167"+
		"\x169\a\x16\x2\x2\x168\x16A\x5*\x16\x2\x169\x168\x3\x2\x2\x2\x16A\x16B"+
		"\x3\x2\x2\x2\x16B\x16C\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16C\x16D\x3"+
		"\x2\x2\x2\x16D\x16E\aM\x2\x2\x16E\'\x3\x2\x2\x2\x16F\x174\aL\x2\x2\x170"+
		"\x171\aJ\x2\x2\x171\x173\a\x18\x2\x2\x172\x170\x3\x2\x2\x2\x173\x176\x3"+
		"\x2\x2\x2\x174\x175\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x175\x177\x3\x2"+
		"\x2\x2\x176\x174\x3\x2\x2\x2\x177\x17B\aJ\x2\x2\x178\x17A\x5(\x15\x2\x179"+
		"\x178\x3\x2\x2\x2\x17A\x17D\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2\x17B\x179"+
		"\x3\x2\x2\x2\x17C\x17E\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17E\x17F\aM"+
		"\x2\x2\x17F)\x3\x2\x2\x2\x180\x181\aL\x2\x2\x181\x182\x5\x2\x2\x2\x182"+
		"\x183\aM\x2\x2\x183\x197\x3\x2\x2\x2\x184\x18A\aL\x2\x2\x185\x186\x5\x98"+
		"M\x2\x186\x187\a\x18\x2\x2\x187\x189\x3\x2\x2\x2\x188\x185\x3\x2\x2\x2"+
		"\x189\x18C\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18B"+
		"\x18D\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18D\x191\x5\x98M\x2\x18E\x190"+
		"\x5*\x16\x2\x18F\x18E\x3\x2\x2\x2\x190\x193\x3\x2\x2\x2\x191\x192\x3\x2"+
		"\x2\x2\x191\x18F\x3\x2\x2\x2\x192\x194\x3\x2\x2\x2\x193\x191\x3\x2\x2"+
		"\x2\x194\x195\aM\x2\x2\x195\x197\x3\x2\x2\x2\x196\x180\x3\x2\x2\x2\x196"+
		"\x184\x3\x2\x2\x2\x197+\x3\x2\x2\x2\x198\x199\a\x19\x2\x2\x199\x19A\a"+
		"\x1A\x2\x2\x19A\x19B\x5\x2\x2\x2\x19B\x19D\aL\x2\x2\x19C\x19E\x5.\x18"+
		"\x2\x19D\x19C\x3\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19F\x1A0\x3\x2\x2\x2"+
		"\x19F\x19D\x3\x2\x2\x2\x1A0\x1A1\x3\x2\x2\x2\x1A1\x1A2\aM\x2\x2\x1A2-"+
		"\x3\x2\x2\x2\x1A3\x1A5\aL\x2\x2\x1A4\x1A6\x5\x30\x19\x2\x1A5\x1A4\x3\x2"+
		"\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7\x1A8\x3\x2\x2\x2\x1A7\x1A5\x3\x2\x2"+
		"\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AA\x5\x96L\x2\x1AA\x1AB\aM\x2\x2\x1AB"+
		"/\x3\x2\x2\x2\x1AC\x1AD\aL\x2\x2\x1AD\x1B3\x5\x98M\x2\x1AE\x1AF\aL\x2"+
		"\x2\x1AF\x1B0\x5\x98M\x2\x1B0\x1B1\aM\x2\x2\x1B1\x1B4\x3\x2\x2\x2\x1B2"+
		"\x1B4\x5z>\x2\x1B3\x1AE\x3\x2\x2\x2\x1B3\x1B2\x3\x2\x2\x2\x1B4\x1B5\x3"+
		"\x2\x2\x2\x1B5\x1B6\aM\x2\x2\x1B6\x31\x3\x2\x2\x2\x1B7\x1B8\a\x1B\x2\x2"+
		"\x1B8\x1BD\t\x5\x2\x2\x1B9\x1BE\x5\x66\x34\x2\x1BA\x1BE\a\x1D\x2\x2\x1BB"+
		"\x1BE\a\x1C\x2\x2\x1BC\x1BE\a\x1E\x2\x2\x1BD\x1B9\x3\x2\x2\x2\x1BD\x1BA"+
		"\x3\x2\x2\x2\x1BD\x1BB\x3\x2\x2\x2\x1BD\x1BC\x3\x2\x2\x2\x1BE\x33\x3\x2"+
		"\x2\x2\x1BF\x1C0\a\x1F\x2\x2\x1C0\x1C1\x5N(\x2\x1C1\x1C2\x5\x96L\x2\x1C2"+
		"\x35\x3\x2\x2\x2\x1C3\x1C4\a \x2\x2\x1C4\x1C5\x5N(\x2\x1C5\x1C6\x5\x96"+
		"L\x2\x1C6\x37\x3\x2\x2\x2\x1C7\x1C8\a!\x2\x2\x1C8\x1C9\x5N(\x2\x1C9\x1CA"+
		"\x5\x96L\x2\x1CA\x39\x3\x2\x2\x2\x1CB\x1CC\a\"\x2\x2\x1CC\x1CD\x5J&\x2"+
		"\x1CD\x1CE\x5J&\x2\x1CE;\x3\x2\x2\x2\x1CF\x1D0\a#\x2\x2\x1D0\x1D1\x5J"+
		"&\x2\x1D1\x1D2\x5J&\x2\x1D2=\x3\x2\x2\x2\x1D3\x1D4\a$\x2\x2\x1D4\x1D5"+
		"\x5J&\x2\x1D5?\x3\x2\x2\x2\x1D6\x1D7\a%\x2\x2\x1D7\x1D8\x5P)\x2\x1D8\x41"+
		"\x3\x2\x2\x2\x1D9\x1DA\a&\x2\x2\x1DA\x1DB\a\'\x2\x2\x1DB\x43\x3\x2\x2"+
		"\x2\x1DC\x1DD\a(\x2\x2\x1DD\x1DE\x5\x96L\x2\x1DE\x1DF\x5\xE\b\x2\x1DF"+
		"\x1E7\x3\x2\x2\x2\x1E0\x1E1\a(\x2\x2\x1E1\x1E2\a\x10\x2\x2\x1E2\x1E3\a"+
		"L\x2\x2\x1E3\x1E4\x5:\x1E\x2\x1E4\x1E5\aM\x2\x2\x1E5\x1E7\x3\x2\x2\x2"+
		"\x1E6\x1DC\x3\x2\x2\x2\x1E6\x1E0\x3\x2\x2\x2\x1E7\x45\x3\x2\x2\x2\x1E8"+
		"\x1E9\a)\x2\x2\x1E9\x1EA\x5\x2\x2\x2\x1EAG\x3\x2\x2\x2\x1EB\x1EC\a*\x2"+
		"\x2\x1EC\x1ED\x5\x98M\x2\x1ED\x1EE\a+\x2\x2\x1EE\x1EF\x5\x98M\x2\x1EF"+
		"I\x3\x2\x2\x2\x1F0\x1FE\x5\x2\x2\x2\x1F1\x1FE\x5\x8CG\x2\x1F2\x1FE\x5"+
		"\x8EH\x2\x1F3\x1FE\x5L\'\x2\x1F4\x1F8\aL\x2\x2\x1F5\x1F9\a,\x2\x2\x1F6"+
		"\x1F9\a-\x2\x2\x1F7\x1F9\x5\x96L\x2\x1F8\x1F5\x3\x2\x2\x2\x1F8\x1F6\x3"+
		"\x2\x2\x2\x1F8\x1F7\x3\x2\x2\x2\x1F9\x1FA\x3\x2\x2\x2\x1FA\x1FB\x5P)\x2"+
		"\x1FB\x1FC\aM\x2\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1F0\x3\x2\x2\x2\x1FD\x1F1"+
		"\x3\x2\x2\x2\x1FD\x1F2\x3\x2\x2\x2\x1FD\x1F3\x3\x2\x2\x2\x1FD\x1F4\x3"+
		"\x2\x2\x2\x1FEK\x3\x2\x2\x2\x1FF\x200\aL\x2\x2\x200\x201\a.\x2\x2\x201"+
		"\x202\x5J&\x2\x202\x203\aM\x2\x2\x203M\x3\x2\x2\x2\x204\x208\aL\x2\x2"+
		"\x205\x209\x5\x2\x2\x2\x206\x209\a\x4\x2\x2\x207\x209\x5^\x30\x2\x208"+
		"\x205\x3\x2\x2\x2\x208\x206\x3\x2\x2\x2\x208\x207\x3\x2\x2\x2\x209\x20A"+
		"\x3\x2\x2\x2\x20A\x20D\a/\x2\x2\x20B\x20E\x5\x98M\x2\x20C\x20E\x5\x2\x2"+
		"\x2\x20D\x20B\x3\x2\x2\x2\x20D\x20C\x3\x2\x2\x2\x20E\x20F\x3\x2\x2\x2"+
		"\x20F\x210\aM\x2\x2\x210O\x3\x2\x2\x2\x211\x21F\x5\x2\x2\x2\x212\x21F"+
		"\x5\x90I\x2\x213\x21F\x5v<\x2\x214\x215\aL\x2\x2\x215\x216\x5Z.\x2\x216"+
		"\x219\x5\\/\x2\x217\x21A\x5\x98M\x2\x218\x21A\x5\x2\x2\x2\x219\x217\x3"+
		"\x2\x2\x2\x219\x218\x3\x2\x2\x2\x21A\x21B\x3\x2\x2\x2\x21B\x21C\aM\x2"+
		"\x2\x21C\x21F\x3\x2\x2\x2\x21D\x21F\x5R*\x2\x21E\x211\x3\x2\x2\x2\x21E"+
		"\x212\x3\x2\x2\x2\x21E\x213\x3\x2\x2\x2\x21E\x214\x3\x2\x2\x2\x21E\x21D"+
		"\x3\x2\x2\x2\x21FQ\x3\x2\x2\x2\x220\x224\aL\x2\x2\x221\x225\a,\x2\x2\x222"+
		"\x225\a-\x2\x2\x223\x225\x5\x96L\x2\x224\x221\x3\x2\x2\x2\x224\x222\x3"+
		"\x2\x2\x2\x224\x223\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x227\x5V,\x2"+
		"\x227\x228\aM\x2\x2\x228S\x3\x2\x2\x2\x229\x22A\aL\x2\x2\x22A\x22B\a\x30"+
		"\x2\x2\x22B\x22C\x5\x2\x2\x2\x22C\x22D\aM\x2\x2\x22DU\x3\x2\x2\x2\x22E"+
		"\x22F\x5X-\x2\x22FW\x3\x2\x2\x2\x230\x231\aL\x2\x2\x231\x232\a\x31\x2"+
		"\x2\x232\x233\x5\x96L\x2\x233\x234\x5P)\x2\x234\x235\a\x32\x2\x2\x235"+
		"\x236\x5\x2\x2\x2\x236\x237\aM\x2\x2\x237Y\x3\x2\x2\x2\x238\x23C\x5\x2"+
		"\x2\x2\x239\x23C\a\x4\x2\x2\x23A\x23C\x5`\x31\x2\x23B\x238\x3\x2\x2\x2"+
		"\x23B\x239\x3\x2\x2\x2\x23B\x23A\x3\x2\x2\x2\x23C[\x3\x2\x2\x2\x23D\x23E"+
		"\t\x6\x2\x2\x23E]\x3\x2\x2\x2\x23F\x242\x5\x62\x32\x2\x240\x242\x5`\x31"+
		"\x2\x241\x23F\x3\x2\x2\x2\x241\x240\x3\x2\x2\x2\x242_\x3\x2\x2\x2\x243"+
		"\x244\aL\x2\x2\x244\x245\x5\x64\x33\x2\x245\x246\a\a\x2\x2\x246\x247\a"+
		"M\x2\x2\x247\x24A\x3\x2\x2\x2\x248\x24A\x5\x66\x34\x2\x249\x243\x3\x2"+
		"\x2\x2\x249\x248\x3\x2\x2\x2\x24A\x61\x3\x2\x2\x2\x24B\x24C\aL\x2\x2\x24C"+
		"\x24D\x5\x64\x33\x2\x24D\x24E\a\b\x2\x2\x24E\x24F\aM\x2\x2\x24F\x252\x3"+
		"\x2\x2\x2\x250\x252\x5h\x35\x2\x251\x24B\x3\x2\x2\x2\x251\x250\x3\x2\x2"+
		"\x2\x252\x63\x3\x2\x2\x2\x253\x258\x5\x96L\x2\x254\x258\a\x1E\x2\x2\x255"+
		"\x258\a\x1C\x2\x2\x256\x258\a\x1D\x2\x2\x257\x253\x3\x2\x2\x2\x257\x254"+
		"\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x257\x256\x3\x2\x2\x2\x258\x65\x3\x2"+
		"\x2\x2\x259\x25A\aL\x2\x2\x25A\x25B\a\x37\x2\x2\x25B\x25C\x5J&\x2\x25C"+
		"\x25D\aM\x2\x2\x25Dg\x3\x2\x2\x2\x25E\x25F\aL\x2\x2\x25F\x260\a\b\x2\x2"+
		"\x260\x261\x5`\x31\x2\x261\x262\aM\x2\x2\x262i\x3\x2\x2\x2\x263\x264\a"+
		"L\x2\x2\x264\x265\a\x38\x2\x2\x265\x266\t\x2\x2\x2\x266\x267\aM\x2\x2"+
		"\x267k\x3\x2\x2\x2\x268\x26E\x5\x2\x2\x2\x269\x26E\x5\x96L\x2\x26A\x26E"+
		"\x5|?\x2\x26B\x26E\x5\x98M\x2\x26C\x26E\x5n\x38\x2\x26D\x268\x3\x2\x2"+
		"\x2\x26D\x269\x3\x2\x2\x2\x26D\x26A\x3\x2\x2\x2\x26D\x26B\x3\x2\x2\x2"+
		"\x26D\x26C\x3\x2\x2\x2\x26Em\x3\x2\x2\x2\x26F\x27A\x5\x2\x2\x2\x270\x27A"+
		"\x5P)\x2\x271\x27A\x5p\x39\x2\x272\x27A\x5r:\x2\x273\x27A\a\a\x2\x2\x274"+
		"\x27A\a\b\x2\x2\x275\x27A\x5\x62\x32\x2\x276\x27A\x5j\x36\x2\x277\x27A"+
		"\x5t;\x2\x278\x27A\x5v<\x2\x279\x26F\x3\x2\x2\x2\x279\x270\x3\x2\x2\x2"+
		"\x279\x271\x3\x2\x2\x2\x279\x272\x3\x2\x2\x2\x279\x273\x3\x2\x2\x2\x279"+
		"\x274\x3\x2\x2\x2\x279\x275\x3\x2\x2\x2\x279\x276\x3\x2\x2\x2\x279\x277"+
		"\x3\x2\x2\x2\x279\x278\x3\x2\x2\x2\x27Ao\x3\x2\x2\x2\x27B\x281\aL\x2\x2"+
		"\x27C\x27D\x5\x98M\x2\x27D\x27E\a\x18\x2\x2\x27E\x280\x3\x2\x2\x2\x27F"+
		"\x27C\x3\x2\x2\x2\x280\x283\x3\x2\x2\x2\x281\x282\x3\x2\x2\x2\x281\x27F"+
		"\x3\x2\x2\x2\x282\x284\x3\x2\x2\x2\x283\x281\x3\x2\x2\x2\x284\x285\x5"+
		"\x98M\x2\x285\x286\aM\x2\x2\x286q\x3\x2\x2\x2\x287\x28B\x5V,\x2\x288\x28B"+
		"\x5\x16\f\x2\x289\x28B\x5\x18\r\x2\x28A\x287\x3\x2\x2\x2\x28A\x288\x3"+
		"\x2\x2\x2\x28A\x289\x3\x2\x2\x2\x28Bs\x3\x2\x2\x2\x28C\x28D\aL\x2\x2\x28D"+
		"\x28E\a\x39\x2\x2\x28E\x28F\x5\x96L\x2\x28F\x290\a:\x2\x2\x290\x291\x5"+
		"\x96L\x2\x291\x292\aM\x2\x2\x292u\x3\x2\x2\x2\x293\x294\aL\x2\x2\x294"+
		"\x295\a;\x2\x2\x295\x296\x5n\x38\x2\x296\x297\x5\x2\x2\x2\x297\x298\x5"+
		"|?\x2\x298\x299\aM\x2\x2\x299w\x3\x2\x2\x2\x29A\x29B\aH\x2\x2\x29B\x29C"+
		"\x5z>\x2\x29C\x29D\x5z>\x2\x29Dy\x3\x2\x2\x2\x29E\x2AA\x5\x2\x2\x2\x29F"+
		"\x2AA\x5\x98M\x2\x2A0\x2A1\aL\x2\x2\x2A1\x2A4\a<\x2\x2\x2A2\x2A5\x5\x2"+
		"\x2\x2\x2A3\x2A5\x5\x98M\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A3\x3\x2\x2\x2"+
		"\x2A5\x2A6\x3\x2\x2\x2\x2A6\x2A7\x5J&\x2\x2A7\x2A8\aM\x2\x2\x2A8\x2AA"+
		"\x3\x2\x2\x2\x2A9\x29E\x3\x2\x2\x2\x2A9\x29F\x3\x2\x2\x2\x2A9\x2A0\x3"+
		"\x2\x2\x2\x2AA{\x3\x2\x2\x2\x2AB\x2C6\aL\x2\x2\x2AC\x2AD\a\x46\x2\x2\x2AD"+
		"\x2AF\x5|?\x2\x2AE\x2B0\x5|?\x2\x2AF\x2AE\x3\x2\x2\x2\x2B0\x2B1\x3\x2"+
		"\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B1\x2AF\x3\x2\x2\x2\x2B2\x2C7\x3\x2\x2"+
		"\x2\x2B3\x2B4\x5~@\x2\x2B4\x2B5\x5\x96L\x2\x2B5\x2B6\x5\x96L\x2\x2B6\x2C7"+
		"\x3\x2\x2\x2\x2B7\x2C7\x5x=\x2\x2B8\x2B9\aH\x2\x2\x2B9\x2BA\x5J&\x2\x2BA"+
		"\x2BB\x5J&\x2\x2BB\x2C7\x3\x2\x2\x2\x2BC\x2BD\aI\x2\x2\x2BD\x2C7\x5|?"+
		"\x2\x2BE\x2BF\aH\x2\x2\x2BF\x2C0\x5`\x31\x2\x2C0\x2C1\x5`\x31\x2\x2C1"+
		"\x2C7\x3\x2\x2\x2\x2C2\x2C3\aH\x2\x2\x2C3\x2C4\x5\x62\x32\x2\x2C4\x2C5"+
		"\x5\x62\x32\x2\x2C5\x2C7\x3\x2\x2\x2\x2C6\x2AC\x3\x2\x2\x2\x2C6\x2B3\x3"+
		"\x2\x2\x2\x2C6\x2B7\x3\x2\x2\x2\x2C6\x2B8\x3\x2\x2\x2\x2C6\x2BC\x3\x2"+
		"\x2\x2\x2C6\x2BE\x3\x2\x2\x2\x2C6\x2C2\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2"+
		"\x2\x2C8\x2C9\aM\x2\x2\x2C9\x2CC\x3\x2\x2\x2\x2CA\x2CC\x5\x16\f\x2\x2CB"+
		"\x2AB\x3\x2\x2\x2\x2CB\x2CA\x3\x2\x2\x2\x2CC}\x3\x2\x2\x2\x2CD\x2CE\t"+
		"\a\x2\x2\x2CE\x7F\x3\x2\x2\x2\x2CF\x2D0\aL\x2\x2\x2D0\x2D1\a=\x2\x2\x2D1"+
		"\x2D2\x5\x96L\x2\x2D2\x2D3\x5\x96L\x2\x2D3\x2D4\aM\x2\x2\x2D4\x81\x3\x2"+
		"\x2\x2\x2D5\x2D6\aL\x2\x2\x2D6\x2D7\a>\x2\x2\x2D7\x2D8\x5\x96L\x2\x2D8"+
		"\x2D9\x5\x96L\x2\x2D9\x2DA\aM\x2\x2\x2DA\x83\x3\x2\x2\x2\x2DB\x2DC\aL"+
		"\x2\x2\x2DC\x2DD\a?\x2\x2\x2DD\x2DE\x5\x96L\x2\x2DE\x2DF\x5\x96L\x2\x2DF"+
		"\x2E0\aM\x2\x2\x2E0\x85\x3\x2\x2\x2\x2E1\x2E2\aL\x2\x2\x2E2\x2E3\a@\x2"+
		"\x2\x2E3\x2E4\x5\x96L\x2\x2E4\x2E5\x5\x96L\x2\x2E5\x2E6\aM\x2\x2\x2E6"+
		"\x87\x3\x2\x2\x2\x2E7\x2E8\aL\x2\x2\x2E8\x2E9\a\x41\x2\x2\x2E9\x2EA\x5"+
		"\x96L\x2\x2EA\x2EB\x5\x96L\x2\x2EB\x2EC\aM\x2\x2\x2EC\x89\x3\x2\x2\x2"+
		"\x2ED\x2EE\aL\x2\x2\x2EE\x2F2\a\x42\x2\x2\x2EF\x2F3\x5\x2\x2\x2\x2F0\x2F3"+
		"\x5P)\x2\x2F1\x2F3\x5V,\x2\x2F2\x2EF\x3\x2\x2\x2\x2F2\x2F0\x3\x2\x2\x2"+
		"\x2F2\x2F1\x3\x2\x2\x2\x2F3\x2F4\x3\x2\x2\x2\x2F4\x2F5\aM\x2\x2\x2F5\x8B"+
		"\x3\x2\x2\x2\x2F6\x2F7\aL\x2\x2\x2F7\x2F8\a\v\x2\x2\x2F8\x2F9\x5P)\x2"+
		"\x2F9\x2FA\a\x32\x2\x2\x2FA\x2FB\x5\x2\x2\x2\x2FB\x2FC\aM\x2\x2\x2FC\x8D"+
		"\x3\x2\x2\x2\x2FD\x2FE\aL\x2\x2\x2FE\x2FF\a\n\x2\x2\x2FF\x300\x5P)\x2"+
		"\x300\x301\a\x32\x2\x2\x301\x302\x5\x2\x2\x2\x302\x303\aM\x2\x2\x303\x8F"+
		"\x3\x2\x2\x2\x304\x305\aL\x2\x2\x305\x30C\a\x43\x2\x2\x306\x30D\x5\x16"+
		"\f\x2\x307\x309\x5P)\x2\x308\x307\x3\x2\x2\x2\x309\x30A\x3\x2\x2\x2\x30A"+
		"\x30B\x3\x2\x2\x2\x30A\x308\x3\x2\x2\x2\x30B\x30D\x3\x2\x2\x2\x30C\x306"+
		"\x3\x2\x2\x2\x30C\x308\x3\x2\x2\x2\x30D\x30E\x3\x2\x2\x2\x30E\x30F\aM"+
		"\x2\x2\x30F\x91\x3\x2\x2\x2\x310\x311\aL\x2\x2\x311\x312\a\x44\x2\x2\x312"+
		"\x313\x5P)\x2\x313\x314\a\x32\x2\x2\x314\x315\x5\x2\x2\x2\x315\x316\a"+
		"M\x2\x2\x316\x93\x3\x2\x2\x2\x317\x318\aL\x2\x2\x318\x319\a\x45\x2\x2"+
		"\x319\x31A\x5J&\x2\x31A\x31B\a\x32\x2\x2\x31B\x31C\x5\x2\x2\x2\x31C\x31D"+
		"\aM\x2\x2\x31D\x95\x3\x2\x2\x2\x31E\x32F\x5\x2\x2\x2\x31F\x32F\x5\x8A"+
		"\x46\x2\x320\x32F\x5\x82\x42\x2\x321\x32F\x5\x84\x43\x2\x322\x32F\x5\x86"+
		"\x44\x2\x323\x32F\x5\x80\x41\x2\x324\x32F\x5\x88\x45\x2\x325\x32F\x5\x92"+
		"J\x2\x326\x32F\x5N(\x2\x327\x32F\x5\x94K\x2\x328\x32F\x5T+\x2\x329\x32B"+
		"\aJ\x2\x2\x32A\x329\x3\x2\x2\x2\x32B\x32C\x3\x2\x2\x2\x32C\x32A\x3\x2"+
		"\x2\x2\x32C\x32D\x3\x2\x2\x2\x32D\x32F\x3\x2\x2\x2\x32E\x31E\x3\x2\x2"+
		"\x2\x32E\x31F\x3\x2\x2\x2\x32E\x320\x3\x2\x2\x2\x32E\x321\x3\x2\x2\x2"+
		"\x32E\x322\x3\x2\x2\x2\x32E\x323\x3\x2\x2\x2\x32E\x324\x3\x2\x2\x2\x32E"+
		"\x325\x3\x2\x2\x2\x32E\x326\x3\x2\x2\x2\x32E\x327\x3\x2\x2\x2\x32E\x328"+
		"\x3\x2\x2\x2\x32E\x32A\x3\x2\x2\x2\x32F\x97\x3\x2\x2\x2\x330\x332\aK\x2"+
		"\x2\x331\x330\x3\x2\x2\x2\x332\x333\x3\x2\x2\x2\x333\x331\x3\x2\x2\x2"+
		"\x333\x334\x3\x2\x2\x2\x334\x99\x3\x2\x2\x2<\xA2\xA8\xAA\xB9\xBF\xC9\xCB"+
		"\xEA\xEF\xF7\x102\x109\x111\x118\x126\x130\x13B\x14A\x153\x160\x16B\x174"+
		"\x17B\x18A\x191\x196\x19F\x1A7\x1B3\x1BD\x1E6\x1F8\x1FD\x208\x20D\x219"+
		"\x21E\x224\x23B\x241\x249\x251\x257\x26D\x279\x281\x28A\x2A4\x2A9\x2B1"+
		"\x2C6\x2CB\x2F2\x30A\x30C\x32C\x32E\x333";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
